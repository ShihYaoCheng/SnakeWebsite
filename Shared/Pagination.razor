@using SnakeAsianLeague.Data.Paging



@* @if (MetaData.TotalCount != 0)
{ *@
    <nav class="page-select" aria-label="Page navigation example">
        <ul class="pagination justify-content-center">
            @foreach (var link in _links)
            {
                <li @onclick="() => OnSelectedPage(link)" style="cursor: pointer;" class="page-item @(link.Enabled ? null : "disabled") @(link.Active ? "active" : null)">
                    <span class="page-link" href="#">@link.Text</span>
                </li>
            }
        </ul>
    </nav>
@* } *@



@code {

    [Parameter] public MetaData MetaData { get; set; }

    [Parameter] public EventCallback<int> SelectedPage { get; set; }

    [Parameter] public int Spread { get; set; }

    private List<PagingLink> _links;
    //private List<LinkModel> links;

    protected override void OnParametersSet() 
    {
        CreatePaginationLinks();
    }

    /// <summary>
    /// 產生頁籤
    /// </summary>
    private void CreatePaginationLinks()
    {
        _links = new List<PagingLink>();


        _links.Add(new PagingLink(1, MetaData.HasTop, "|<"));
        _links.Add(new PagingLink(MetaData.CurrentPage - 1, MetaData.HasPrevious, "<"));
        
        for (int i = 1; i <= MetaData.TotalPages; i++)
        {
            if(i >= MetaData.CurrentPage - Spread && i <= MetaData.CurrentPage + Spread)
            {
                _links.Add(new PagingLink(i, true, i.ToString()) { Active = MetaData.CurrentPage == i });
            }
        }

        _links.Add(new PagingLink(MetaData.CurrentPage + 1, MetaData.HasNext, ">"));
        _links.Add(new PagingLink(MetaData.TotalPages , MetaData.HasEnd , ">|"));
    }

    /// <summary>
    /// 選擇頁籤event
    /// </summary>
    /// <param name="link"></param>
    /// <returns></returns>
    private async Task OnSelectedPage(PagingLink link)
    {
        if (link.Page == MetaData.CurrentPage || !link.Enabled)
            return;

        MetaData.CurrentPage = link.Page;
        await SelectedPage.InvokeAsync(link.Page);
    }

}
