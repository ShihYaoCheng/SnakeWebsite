@using SnakeAsianLeague.Data.Entity
@using SnakeAsianLeague.Data.Services
@inject IJSRuntime JS
@inject IAuthService authService
@inject AppState AppState

<div class="login_block" id="login_block">
    <div class="login_block_bg" @onclick="loginCloseClick"></div>

    <div class="login" id="login_window">
        <svg xmlns="http://www.w3.org/2000/svg" width="24.122" height="24.12" viewBox="0 0 24.122 24.12"
             id="login_close" @onclick="loginCloseClick">
            <path id="" data-name="合体 5" d="M-12484-1752l-11,11,11-11-11-11,11,11,11-11-11,11,11,11Z"
                  transform="translate(12496.062 1764.06)" fill="none" stroke="#e0eeff" stroke-linecap="round"
                  stroke-linejoin="round" stroke-width="3" />
        </svg>
        <p class="window_p" data-i18n="[html]signInWindows.PonPonSnake">登入碰碰蛇帳號</p>
        <div class="login_pictuer_block">
            <img id="login_pictuer" data-src="images\Other\login_picture.webp" src="images\Other\login_picture.webp"alt="">
        </div>       

        <EditForm Model = "@loginRequest" OnValidSubmit="@LoginSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="input_block">
                <div class="login_form">
                    <label class="login_label" for="account" data-i18n="[html]signInWindows.PhoneNumber">Phone Number</label>
                    @* 國碼 *@
                    <div class="login_input_block">
                        <InputText id="phone-countryCode" @bind-Value="loginRequest.countryCode" class="login_input" placeholder="+886"/>
                        <InputText id="phone-number" @bind-Value="loginRequest.phone" class="login_input" placeholder="9xxxxxxxx"/>
                        @*<input type="text" class="login_input" id="phone-countryCode" name="" placeholder="+886" @bind=loginRequest.countryCode required>*@
                        @*<input type="text" class="login_input" id="phone-number" name="" placeholder="9xxxxxxxx"  @bind=loginRequest.phone  required>*@
                    </div>
                </div>
                <div class="login_form" style="margin-bottom: 20px;">
                    <label class="login_label" for="password" data-i18n="[html]signInWindows.Password">Password</label>
                    <div class="login_input_block">
                        <InputText id="password" @bind-Value="loginRequest.password" class="login_input" type="password" placeholder=""/>

                        @* <input type="password" class="login_input" id="password" name="password" placeholder="" 　@bind=loginRequest.password >*@
                    </div>
                </div>
                <div  style="margin-bottom: 10px;">
                     <input type="checkbox" id="autoLogin" name="autoLogin" @onchange="(e)=>{toggleAutoLogin(e);}"   >
                     <label class="autoLoginLabel"  for="autoLogin" data-i18n="[html]signInWindows.WhetheLogged">是否維持登入狀態</label>
                </div>
                <div type="text" class="login_error" hidden="@(!loginErrorShow)"  data-i18n="[html]signInWindows.Failed">登入失敗，請重新登入</div>


                <button id="login_submit" type="submit">
                    <img data-src="/images/Index/signUpEvent_button.webp" src="/images/Index/signUpEvent_button.webp"alt="">
                    <span data-i18n="[html]signInWindows.SignIn">登入</span>  
                </button>

                @*<div id="login_submit" >                
                    <img data-src="/images/Index/signUpEvent_button.webp" src="/images/Index/signUpEvent_button.webp"alt="">
                    <span data-i18n="[html]signInWindows.SignIn">登入</span>                
                </div>*@
            </div>

        </EditForm>
        
    </div>
</div>

@code {
    // [Parameter]
    //public Boolean loginErrorShow { get; set;}
    public LoginRequest loginRequest = new LoginRequest();

    bool loginErrorShow;

    //[Parameter]
    //public  LoginRequest loginRequest { get; set;}


    private async Task loginCloseClick()
    {
        await JS.InvokeVoidAsync("loginClose");
    }


    // [Parameter]
    //public EventCallback<int> LoginSubmit { get; set;}

    // private void LoginSubmitBtn()
    //{
    //    LoginSubmit.InvokeAsync();   
    //}

    bool autoLogin =false;
    private  async Task toggleAutoLogin(ChangeEventArgs value )
    {
        if (value.Value != null)
        {
             autoLogin = (bool)value.Value == true ? true :false ;
        }       
    }

    private async Task LoginSubmit()
    {

        SnakeAccount snakeAccount = await authService.AuthLogin(loginRequest , autoLogin);
        AppState.UpdateLoginStatus(this, snakeAccount);       
        if (AppState.LoginStatus.IsLogin == true)
        {
            loginErrorShow = false;
            await JS.InvokeVoidAsync("loginClose");
            await JS.InvokeVoidAsync("myprofileSidebar");
            await JS.InvokeVoidAsync("installI18n");
            await JS.InvokeVoidAsync("navbarSlide");
            //HandleClick();

        }
        else
        {
            loginErrorShow = true;
        }

    }

}
