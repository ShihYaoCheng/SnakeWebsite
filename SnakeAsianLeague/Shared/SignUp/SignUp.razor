@page "/SignUp/{code}"
@page "/SignUp/"
@using SnakeAsianLeague.Data.Services
@using SnakeAsianLeague.Data.Entity.SnakeServer
@using SnakeAsianLeague.Data.Entity
@using SnakeAsianLeague.Data.Services.Backstage
@using System.Text.RegularExpressions

@inject OfficialWebsiteData OfficialWebsiteData
@inject IAuthService AuthService
@inject IJSRuntime JS
@inject AppState AppState
@implements IDisposable
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<head>
    <title>PonPonSnake｜Sign Up</title>
    <link href="/css/Shared/SignUp.css" rel="stylesheet" />
</head>



<div class="SignUp-Page" id="register_wrap">

    @* <section class="@(displayForm? "" : "d-none") products-popup-bg products-popup-open "
        id="products-popupblock-Name"> *@
    <section class="SignUp-Block-BG ">
        <div class="SignUp-Block">


            <div class="SignUp-popup-title" data-i18n="Home_data:register.title">Register Account</div>

            @* <EditForm Model="@RegisterDTO" class="window_input_block"> *@
            @* <DataAnnotationsValidator />
                <ValidationSummary /> *@

            <div class="SignUp-popup-content">

                <div class="SignUp-avatar">
                    <img src="/images/Shared/SignUp/avatar.png" alt="">
                </div>

                <div class="SignUp-popup-scroll">

                <div class="popup-low">
                    <label class="popup-label" for="RegisterPassword" data-i18n="Home_data:register.phoneNumber">Phone Number</label>

                    <div class="SignUp-input-row">
                        @*<input type="text" class="SignUp-inputText" id="CountryCode" name="CountryCode" placeholder="+886" data-i18n="[data-content]Home_data:register.countryCode" @bind="CountryCode">*@
                        
                        <select @bind="CountryCode" class="SignUp-inputText " id="SignUpSelectText" >
                            @*<option value="+886"  data-i18n="countryCode_data:country_code.AE"></option>*@
                            
                        </select> 

                        <input @bind="PhoneNum" type="text" class="SignUp-inputText" id="PhoneNum" name="PhoneNum" data-i18n="[placeholder]Home_data:register.inputPhoneNumber;[data-content]Home_data:register.tippy" placeholder="Phone Number">
                        
                    </div>
                </div>


                    <div class="popup-low">
                        

                        <label class="popup-label" for="name"
                            data-i18n="Home_data:register.verifyCode">VerifyCode 
                            @* <span class="verifyCodeText" data-i18n="Home_data:register.verifyCodeText">(Enter the 4-digit verify code)</span> *@
                        </label>

                        <div class="SignUp-input-row">
                            <input class="SignUp-inputText" id="" type="text"
                                @bind-value="RegisterDTO.VerifyCode" placeholder="4-digit verify code"  data-i18n="[placeholder]Home_data:register.verifyCodeText">
                            <div class="TimeLeft">
                                    <button  hidden="@(sendVerifyCodehidden)" class="TimeLeft-button" disabled=@TimerIsRunning @onclick="SendVerifyCode"
                                    data-i18n="Home_data:register.sendVerifyCode">Send VerifyCode</button>
                                    <div hidden="@(!sendVerifyCodehidden)"  class="TimeLeft-Resend">
                                        <button class="TimeLeft-button" disabled=@TimerIsRunning @onclick="SendVerifyCode"
                                        data-i18n="Home_data:register.resendVerifyCode">Resend VerifyCode</button>
                                        <span class="TimeLeft-countdown"> @TimeLeft.ToString("mm"):@TimeLeft.ToString("ss")</span>
                                    </div>
                                </div>
                        </div>
                        <div class="if-No-VerifyCode">
                            <span data-i18n="Home_data:register.if-No-VerifyCode">- If not receive the digital code, please contact us on</span>
                            <a href="https://www.facebook.com/PonponSnake" target="_blank" data-i18n="Home_data:register.facebook"> Facebook</a>
                        </div>
                    </div>

                    

                    <div class="popup-low">
                        <label class="popup-label" for="RegisterPassword" data-i18n="Home_data:register.password">Password</label>
                        <input class="SignUp-inputText" id="RegisterPassword" type="text"
                            @bind-value="RegisterDTO.Password" placeholder="Minimum of 6 characters, maximum of 10" data-i18n="[placeholder]Home_data:register.passwordText">
                    </div>

                    <div class="popup-low">
                        <label class="popup-label" for="passwordcheck" data-i18n="Home_data:register.confirmPassword">Confirm
                            Password</label>
                        <input class="SignUp-inputText" id="passwordcheck" type="text"
                            @bind-value="PasswordCheck" placeholder="">
                    </div>

                    <div class="popup-low">
                        <label class="popup-label" for="InvitationCode" data-i18n="Home_data:register.InvitationCode">
                            Invitation Code</label>
                        <input class="SignUp-inputText" id="InvitationCode" type="text" @bind-value=@Code
                             placeholder="No invitation code, leave the field blank."  data-i18n="[placeholder]Home_data:register.InvitationCodeText">
                    </div>



                    <div class="products-popup-error">@ErrorString</div>

                    <button class="products-popup-submit button-hover" type="submit" @onclick="RegisterSubmit"
                        data-i18n="Home_data:register.registerButton">Sign Up</button>

                </div>
            </div>

            @* </EditForm> *@    
            
        </div>
    </section>



    @* 送出成功/失敗 彈窗 *@

    <section class="@(displayAlert? "" : "d-none") products-popup-bg  products-popup-open "
        id="products-popupblock-result">
        <div class="products-popupblock">

            <svg class="products-popup-close" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 25 25" width="25"
                @onclick="AlertCancel">
                <path id="" data-name="" d="M10,10,0,20,10,10,0,0,10,10,20,0,10,10,20,20Z"
                    transform="translate(2.5 2.5)" fill="none" stroke="#fff" stroke-linecap="round"
                    stroke-linejoin="round" stroke-width="5" />
            </svg>

            <div class="SignUp-popup-title" data-i18n="Home_data:registerAlert.@AlertTitleDatai18n">
                
            </div>

            <EditForm Model="@RegisterDTO" class="window_input_block">


                <div class="SignUp-popup-content">

                    @* 這裡待處理 *@
                    <div class="SignUp-popup-text" data-i18n="Home_data:registerAlert.@AlertContentDatai18n"></div>
                    <button class="products-popup-submit button-hover" type="submit" @onclick="AlertCancel"
                        data-i18n="Home_data:register.close">Close</button>
                </div>

            </EditForm>

        </div>
    </section>

   
</div>







@code {
    public string? CountryCode { get; set; } = "+886";
    public string? PhoneNum { get; set; }

    [Parameter]
    public string Code { get; set; } = "";


    bool sendVerifyCodehidden = false;

    //提醒彈窗
    bool displayAlert = false;
    public string? AlertTitleDatai18n { get; set; }
    public string? AlertContentDatai18n { get; set; }
    void AlertShow() => displayAlert = true; 
    void AlertCancel() => displayAlert = false;

    uint userID = 0;
    string phone = "";

    public PhoneMemberRegisterDTO RegisterDTO { get; set; } = new PhoneMemberRegisterDTO();



    public string PasswordCheck { get; set; }
    public string ErrorString { get; set; }



    //倒數計時
    bool TimerIsRunning = false;
    TimeSpan TimeLeft = new TimeSpan();

    async Task Timer()
    {
        while (TimeLeft > new TimeSpan())
        {
            await Task.Delay(1000);
            TimeLeft = TimeLeft.Subtract(new TimeSpan(0, 0, 1));
            StateHasChanged();
        }
        TimerIsRunning = false;
        StateHasChanged();
    }




    private async Task SendVerifyCode()
    {

        if (String.IsNullOrEmpty(CountryCode))
        {
            AlertTitleDatai18n = "countryCode";
            AlertShow();
            return;
        }
        if (String.IsNullOrEmpty(PhoneNum))
        {
            AlertTitleDatai18n = "phoneNum";
            AlertShow();
            return;

        }

        ServerResponce resp = await AuthService.PhoneSendVerifyCode(CountryCode, PhoneNum);
        if (resp.Success == true)
        {
            sendVerifyCodehidden = true;
            TimerIsRunning = true;
            TimeLeft = new TimeSpan(0, 0, 20);
            StateHasChanged();
            Timer();


        }
        else
        {
            AlertTitleDatai18n = "verifyFailed";


            switch (resp.Content)
            {
                case "BadRequest":
                    AlertContentDatai18n = "BadRequest";
                    break;

                case "Conflict":
                    AlertContentDatai18n = "conflict";
                    break;

                default:
                    AlertContentDatai18n = "severError";
                    break;
            }


            AlertShow();
        }


    }



    private async Task RegisterSubmit()
    {
        if (String.IsNullOrEmpty(PhoneNum))
        {
            AlertTitleDatai18n = "registerFailed";
            AlertContentDatai18n = "phoneNum";
            AlertShow();
            return;

        }
        if (String.IsNullOrEmpty(RegisterDTO.VerifyCode))
        {
            AlertTitleDatai18n = "registerFailed";
            AlertContentDatai18n = "VerifyCodeInput";
            AlertShow();
            return;

        }
        if (String.IsNullOrEmpty(RegisterDTO.Password))
        {
            AlertTitleDatai18n = "registerFailed";
            AlertContentDatai18n = "PasswordInput";
            AlertShow();
            return;
        }
        if (PasswordCheck != RegisterDTO.Password)
        {
            AlertTitleDatai18n = "registerFailed";
            AlertContentDatai18n = "PasswordNotMatch";
            AlertShow();
            return;
        }

        bool pwIsMatch = Regex.IsMatch(PasswordCheck, @"^[A-Za-z0-9]{6,10}$");
        if (!pwIsMatch)
        {
            AlertTitleDatai18n = "registerFailed";
            AlertContentDatai18n = "PasswordInvalid";
            AlertShow();
            return;
        }



        ServerResponce resp = await AuthService.PhoneRegister(CountryCode, PhoneNum, RegisterDTO , Code);
        if (resp.Success == true)
        {

            //登出舊儲存帳號
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var LoginUser = authState.User;
            if (LoginUser != null && LoginUser.Identities.Count() != 0)
            {
                await AuthService.AuthLogout();
            }


            //登入
            LoginRequest loginRequest = new LoginRequest();
            loginRequest.Phone = CountryCode + PhoneNum.TrimStart('0');
            loginRequest.Password = PasswordCheck;
            SnakeAccount snakeAccount = await AuthService.AuthLogin(loginRequest, true);
            AppState.UpdateLoginStatus(this, snakeAccount);

            AlertTitleDatai18n = "registerSuccessed";
            AlertContentDatai18n = "NoString";
            AlertShow();

            //呼叫總計註冊API
            userID = snakeAccount.userID;
            phone = snakeAccount.phone;
            OfficialWebsiteData.Register(userID, phone);

            NavigationManager.NavigateTo("/", true);

        }
        else
        {
            //呼叫RegisterFail
            userID = 0;
            await OfficialWebsiteData.RegisterFail(userID, CountryCode + PhoneNum);
            AlertTitleDatai18n = "registerFailed";


            switch (resp.Content)
            {
                case "\"Feedback_8\"":
                    AlertContentDatai18n = "WrongVerifyCode";
                    break;

                case "\"Feedback_2\"":
                    AlertContentDatai18n = "badRequest";
                    break;
                case "\"Feedback_82\"":
                    AlertContentDatai18n = "NoThisInvitor";
                    break;
                case "\"Feedback_7\"":
                    AlertContentDatai18n = "badRequest";
                    break;
                case "\"Feedback_9\"":
                    AlertContentDatai18n = "conflict";
                    break;

                default:
                    AlertContentDatai18n = "severError";
                    break;
            }

            AlertShow();
        }

    }

    private IJSObjectReference? NFTindexBannerJS;
    private IJSObjectReference? countryCodeJS;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {        
        if (firstRender)
        {
            NFTindexBannerJS = await JS.InvokeAsync<IJSObjectReference>("import", "./JavaScript/NFTindex/NFTindexBanner.js");
            countryCodeJS = await JS.InvokeAsync<IJSObjectReference>("import", "./JavaScript/ohterCtrl/countryCode.js");
            await countryCodeJS.InvokeVoidAsync("countryCode","SignUp");            
            await JS.InvokeVoidAsync("installI18n");

            NavigationManager.LocationChanged += HandleLocationChanged;
            AppState.StateChanged += async (Source, Property)
            => await InvokeAsync(StateHasChanged);
        }
        else
        {
            await NFTindexBannerJS.InvokeVoidAsync("I18nAfterRender");
            await JS.InvokeVoidAsync("installI18n");
        }
        await JS.InvokeVoidAsync("installI18n");
    }

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        Console.WriteLine("URL of new location: {Location}", e.Location);
    }

    void IDisposable.Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
        AppState.StateChanged -= async (Source, Property)
        => await InvokeAsync(StateHasChanged);
    }
}
