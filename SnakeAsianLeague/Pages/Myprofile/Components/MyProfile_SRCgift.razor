@using SnakeAsianLeague.Data.Entity.Commodity
@using SnakeAsianLeague.Data.Entity.View
@using SnakeAsianLeague.Data.Services
@using SnakeAsianLeague.Data.Services.BlockChain
@using SnakeAsianLeague.Data.Services.Commodity
@using SnakeAsianLeague.Data.Services.Personal
@using SnakeAsianLeague.Pages.Myprofile.Components.SRCgift_Components
@using SnakeAsianLeague.Pages.Myprofile.Components.Shared_Components



@inject AppState AppState

@inject BlockChainProcessorSever BlockChainSever
@inject IJSRuntime JS
@inject IConfiguration Configuration
@implements IDisposable

<head>
    <link href="css/MyProfile/SRCgift.css" rel="stylesheet" />   
    <link href="css/Inventory.css" rel="stylesheet" />   
    <link href="css/MarketPlace.css" rel="stylesheet" />   
</head>


@*<Walletaddress></Walletaddress>
*@

<div class="SRCgift-block">
    <div class="Inventory">
        <div class="Secend-Block">
            <div class="Secend-Title" data-i18n="Inventory_data:SRCPackage.SRCPackage">SRC Package</div>
            <div class="Secend-Inner" id="">
                <SRCgift_CurrencyTab toggleNFTtype="toggleNFTtype" />
            </div>
        </div>
                    
        <div class="Inventory-PPSR-Block" id="Inventory-PPSR-Block">  
        
            <div class="Inventory-CardBLock"> 

                @switch (NFTtype)
                {
                    case 0:
                    <SRCgift_SRCitem  openCheckoutPop="toggleCheckoutPop" toggleWhetherCheckoutPop="toggleWhetherCheckoutPop" getPurchaseData="getPurchaseData"></SRCgift_SRCitem>
                    break;
                }
             
            </div>
        </div>


    </div>
</div>


@*交易中反灰*@
<TransactWindow></TransactWindow>

@*錯誤訊息*@
@if (islogin )
{
    <ErrorNetwork AddPolygon ="AddPolygon" ></ErrorNetwork>
}

@*購買彈窗*@
@if(showCheckoutPop){

    @switch( whetherCheckoutPop)
    {
        case 1:
           <SRCgift_CheckoutPop closeCheckoutPop="toggleCheckoutPop">   
            <p>
                感謝您購買<span> &lt; @productName &gt;</span>!
            </p> 
            <p>
                您持有的騎士幣(g)增加了<span> &lt; @gSRCBuy &gt;</span>枚，現在共有<span>&lt; @gSRCtotal &gt;</span>枚!
            </p>   
        </SRCgift_CheckoutPop>
            break;
        case 2:
          <SRCgift_CheckoutPop closeCheckoutPop="toggleCheckoutPop">   
                <p>
                    已經取消購買 <span> &lt; @productName &gt;</span>
                </p> 
        </SRCgift_CheckoutPop>
            break;

        case 3:
            <SRCgift_CheckoutPop closeCheckoutPop="toggleCheckoutPop">   
                <p>
                   USDT不足
                </p> 
            </SRCgift_CheckoutPop>
            break;
            
        
    }

}
    @*
        @if(whetherCheckoutPop){
        <SRCgift_CheckoutPop closeCheckoutPop="toggleCheckoutPop">   
            <p>
                感謝您購買<span> &lt; 商品名稱 &gt;</span>!
            </p> 
            <p>
                您持有的騎士幣(g)增加了<span> &lt; 購買量 &gt;</span>枚，現在共有<span>&lt; 總量 &gt;</span>枚!
            </p>   
        </SRCgift_CheckoutPop>
     }
     else
     {
         <SRCgift_CheckoutPop closeCheckoutPop="toggleCheckoutPop">   
                <p>
                    已經取消購買 <span> &lt; 商品名稱 &gt;</span>
                </p> 
        </SRCgift_CheckoutPop>
    }
    *@



@code {
    //是否顯示購買彈窗
    bool showCheckoutPop = false;    
    public void toggleCheckoutPop(bool value)
    {
        showCheckoutPop = value;    
    } 
    //是否顯示購買彈窗的狀態
    int whetherCheckoutPop = 1;
    public void toggleWhetherCheckoutPop(int value)
    {
        whetherCheckoutPop = value;
    }
    //是否登入
    [CascadingParameter] bool islogin { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        AppState.StateChanged += async (Source, Property)
        => await InvokeAsync(StateHasChanged);      

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {         
            await JS.InvokeVoidAsync("installI18n");   
        }     
    }

    void IDisposable.Dispose()
    {
        AppState.StateChanged -= async (Source, Property)
        => await InvokeAsync(StateHasChanged);
    }
    //USDT數量 
    double gSRCBuy;
    decimal gSRCtotal;
    string productName="";

    //取得購買完畢的資料
    public void getPurchaseData(PurchaseData value)
    {
        gSRCBuy = value.gSRCBuy;
        gSRCtotal = value.gSRCtotal;
        productName = value.productName;
    }

    //切換SRC跟Gold的購買畫面
    int NFTtype = 0;
    public void toggleNFTtype(int value)
    {
        NFTtype = value;
    } 
    //是否網路正確
    bool netWorkRight = false;
    //新增AddPolygon鍊
    protected  async Task AddPolygon()
    {
    @*linebot.SemdLineNotifyMsg("test123");*@
        int chainId = BlockChainSever.BlockChainInfoDTO.chainId;
        var chainName = BlockChainSever.BlockChainInfoDTO.blockChain;
        var recUrls = BlockChainSever.BlockChainInfoDTO.chainRPCUrl;
        var nativeCurrencyName = BlockChainSever.BlockChainInfoDTO.nativeCurrencyName;
        int nativeCurrencyDecimals = BlockChainSever.BlockChainInfoDTO.nativeCurrencyDecimals;

        await JS.InvokeVoidAsync("AddPolygonID",chainId, chainName, recUrls , nativeCurrencyName,  nativeCurrencyDecimals);
    }
}
