@using SnakeAsianLeague.Data.Entity.Commodity
@using SnakeAsianLeague.Data.Services
@using SnakeAsianLeague.Data.Services.BlockChain
@using SnakeAsianLeague.Data.Services.Commodity
@using SnakeAsianLeague.Pages.Myprofile.Components.SRCgift_Components
@using SnakeAsianLeague.Pages.Myprofile.Components.Shared_Components

@inject AppState AppState
@inject CommodityServices CommodityServices
@inject BlockChainProcessorSever BlockChainSever
@inject IJSRuntime JS
@inject IConfiguration Configuration
@implements IDisposable

<head>
    <link href="css/MyProfile/SRCgift.css" rel="stylesheet" />   
    <link href="css/Inventory.css" rel="stylesheet" />   
    <link href="css/MarketPlace.css" rel="stylesheet" />   
</head>


@*<Walletaddress></Walletaddress>
*@

<div class="SRCgift-block">
    <div class="Inventory">
        <div class="Secend-Block">
            <div class="Secend-Title" data-i18n="Inventory_data:SRCPackage.SRCPackage">SRC Package</div>
            <div class="Secend-Inner" id="">
                <SRCgift_CurrencyTab />
            </div>
        </div>
                    
        <div class="Inventory-PPSR-Block" id="Inventory-PPSR-Block">  
        
            <div class="Inventory-CardBLock"> 
                @if (IAPItemList != null)
                {
                    @foreach (IAPItem item in IAPItemList)
                    {
                        var SRCValue = @item.addValue + @item.addPlus;

                        <div class="NFTcard card-bg-DarkSeaGreen">  
                            <div class="NFTcardA" >
                                @*<a href="@item.LinkURL" target="opensea">  </a>*@

                                <div class="NFTcard-inner">
                                    <div class="NFT-cardImg">
                                        <img src= "@item.productUrl" alt="" >
                                    </div>
                                    <div class="NFT-cardText Not-Price-Ver">
                                        <div class="giftData-container"    >
                                            <div class="giftData-title">  </div>
                                            <div class="srcZone-container">
                                                <div class="giftData-srcZone">
                                                    <div class="srcZone-coinType">
                                                        <img  class="srcZone-img" src="/images/Myprofile/SRC.webp"/>
                                                        <span class="srcZone-num">SRC</span>
                                                    </div>
                                                    <span class="srcZone-count">
                                                        <span class="srcZone-icon">✕</span> 
                                                        @SRCValue 
                                                    </span>
                                                    
                                                </div>
                                            </div>

                                            <div class="giftData-btn-container">

                                                <div class="usdValuation">  <span>≈USD</span> @item.priceUSD<span></span></div>
                                                <button class="giftData-btn"  @onclick="@(async ()=>{ await BuyPurchase( item.priceUSDT , item.productID);})" > 
                                                    <span>USDT</span> <span class="giftData-btn-nun">@item.priceUSDT</span></button>
                                            </div>
                                        </div>
                                    </div>               
                                </div>                     
                            </div>        
                        </div>
                    }
                }        
            </div>
        </div>


    </div>
</div>


@*交易中反灰*@
<TransactWindow></TransactWindow>

@*錯誤訊息*@
@if (islogin )
{
    <ErrorNetwork AddPolygon ="AddPolygon" ></ErrorNetwork>
}

@*購買彈窗*@
@if(showCheckoutPop){
     @if(whetherCheckoutPop){
        <SRCgift_CheckoutPop closeCheckoutPop="toggleCheckoutPop">   
            <p>
                感謝您購買<span> &lt; 商品名稱 &gt;</span>!
            </p> 
            <p>
                您持有的騎士幣(g)增加了<span> &lt; 購買量 &gt;</span>枚，現在共有<span>&lt; 總量 &gt;</span>枚!
            </p>   
        </SRCgift_CheckoutPop>
     }
     else
     {
         <SRCgift_CheckoutPop closeCheckoutPop="toggleCheckoutPop">   
                <p>
                    已經取消購買 <span> &lt; 商品名稱 &gt;</span>
                </p> 
        </SRCgift_CheckoutPop>
    }
}




@code {

    bool showCheckoutPop = false;
    bool whetherCheckoutPop = false;
    public void toggleCheckoutPop(bool value)
    {
        showCheckoutPop = value;    
    } 

    //是否登入
    [CascadingParameter] bool islogin { get; set; }

    private List<IAPItem> IAPItemList;
    private IJSObjectReference? PurchaseApproveJS;
    private IJSObjectReference? coinEchangeJS;
    //private IJSObjectReference? CheckoutPopJS;

    //是否網路正確
    bool netWorkRight = false;

    protected override async Task OnInitializedAsync()
    {
        AppState.StateChanged += async (Source, Property)
        => await InvokeAsync(StateHasChanged);

        IAPItemList = await CommodityServices.GetIAPItem();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {         
            PurchaseApproveJS  = await JS.InvokeAsync<IJSObjectReference>("import","./JavaScript/MyProfile/BuyPurchase/PurchaseApprove.js");       
            coinEchangeJS = await JS.InvokeAsync<IJSObjectReference>("import","./JavaScript/MyProfile/InventoryAndMarketPlace/coinEchange.js");  
            //CheckoutPopJS= await JS.InvokeAsync<IJSObjectReference>("import","./JavaScript/MyProfile/BuyPurchase/CheckoutPop.js");    
            ////await JS.InvokeVoidAsync("NFTcardAClick"); 
            //await CheckoutPopJS.InvokeVoidAsync("CheckoutPop");

        }
    }

    void IDisposable.Dispose()
    {
        AppState.StateChanged -= async (Source, Property)
        => await InvokeAsync(StateHasChanged);
    }

    //是否授權
    bool transactionResult;
    public async Task BuyPurchase( double USDT,  string productID )
    {
        if (islogin)
        {
            uint UserID = AppState.LoginStatus.userID;

            var USDT_token_addr = BlockChainSever.BlockChainInfoDTO.usdtAddress;
            var PurchaseApprove_address = BlockChainSever.BlockChainInfoDTO.contractAddress_CQIPurchase;

            await coinEchangeJS.InvokeVoidAsync("lockWindowsShow");
            transactionResult = await PurchaseApproveJS.InvokeAsync<bool>("PurchaseApprove", USDT, USDT_token_addr, PurchaseApprove_address);

            if (transactionResult)
            {
                bool result = await CommodityServices.PurchaseByUSDT(UserID, USDT, productID);
            }
            else
            {
                whetherCheckoutPop = false;
                toggleCheckoutPop(true);
            }

            await coinEchangeJS.InvokeVoidAsync("lockWindowsHide");
        }
        else
        {
            await JS.InvokeVoidAsync("loginButton", "loginButton");
        }


    }

    protected  async Task AddPolygon()
    {
    @*linebot.SemdLineNotifyMsg("test123");*@
        int chainId = BlockChainSever.BlockChainInfoDTO.chainId;
        var chainName = BlockChainSever.BlockChainInfoDTO.blockChain;
        var recUrls = BlockChainSever.BlockChainInfoDTO.chainRPCUrl;
        var nativeCurrencyName = BlockChainSever.BlockChainInfoDTO.nativeCurrencyName;
        int nativeCurrencyDecimals = BlockChainSever.BlockChainInfoDTO.nativeCurrencyDecimals;

        await JS.InvokeVoidAsync("AddPolygonID",chainId, chainName, recUrls , nativeCurrencyName,  nativeCurrencyDecimals);
     

    }

}
