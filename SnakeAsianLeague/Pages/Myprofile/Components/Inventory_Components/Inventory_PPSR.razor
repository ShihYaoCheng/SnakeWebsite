@using SnakeAsianLeague.Data.Entity
@using SnakeAsianLeague.Data.Entity.View
@using SnakeAsianLeague.Data.Paging
@using SnakeAsianLeague.Data.Services
@using SnakeAsianLeague.Data.Services.BlockChain
@using SnakeAsianLeague.Data.Services.MarketPlace
@using SnakeAsianLeague.Data.Services.Personal
@using Microsoft.AspNetCore.Components.Authorization

@inject IJSRuntime JS
@inject AppState AppState
@inject InventoryService InventoryService
@inject BlockChainProcessorSever BlockChainSever
@inject AuthenticationStateProvider AuthenticationStateProvider



<div class="Inventory-PPSR-Block" id="Inventory-PPSR-Block">
    <div class="Inventory-PPSR-Block-Nav">
        <div>
            <div class="Inventory-PPSR-Amount">@PPSRsCount PPSRs</div>
            <div class="AllBalance">
                <span data-i18n="Inventory_data:otherTitle.TotalIncomeSRC">Total Income: </span>
                <span> @AllBalance </span> 
                <span data-i18n="Inventory_data:otherTitle.SRC">SRC </span> 
            </div>
             <div class="AllBalance">
                <span data-i18n="Inventory_data:otherTitle.TotalIncomeSRC">Total Income: </span>
                <span> @AllGoldBalance </span> 
                <span data-i18n="Inventory_data:otherTitle.Gem">Gem </span> 
            </div>          
        </div>
        @if (AllBalance == 0)
            {        
                <div class="  CollectBtnBlack CollectBtnSamll" data-i18n="Inventory_data:otherTitle.NoBalance" >                                 
                    No Balance
                </div>    
            }
            else
            {                         
                <button  data-i18n="Inventory_data:otherTitle.CollectAllIncome" class=" CollectBtn CollectBtnSamll"   @onclick="eventArgs => { setValue(  eventArgs); }" >       
                    Collect All Income
                </button>
            }
    </div>
    <div class="Inventory-PPSR-Select">
        @if (AllBalance == 0)
        {
            <div class="CollectBtnBlack CollectBtnBig"  data-i18n="Inventory_data:otherTitle.NoBalance" >         
                No Balance
            </div>    
        }
        else
        {
            <button data-i18n="Inventory_data:otherTitle.CollectAllIncome" class="CollectBtn CollectBtnBig" @onclick="eventArgs => { setValue(  eventArgs); }" >             
                Collect All Income
            </button>
        }

        @*Filter*@
        <div class="Inventory-PPSR-Filter-Block">
            <div class="Inventory-PPSR-Filter Inventory-hover">
                <svg class="Filter-Icon" xmlns="http://www.w3.org/2000/svg" width="28.06" height="25.65" viewBox="0 0 28.06 25.65">
                    <g id="" data-name="" transform="translate(1508 -1239.175)">
                        <path id="" data-name="" d="M26.916,2.993H7.6A1.851,1.851,0,0,0,7.6.707H26.916a1.143,1.143,0,1,1,0,2.287Zm-22.224,0H1.144a1.143,1.143,0,1,1,0-2.287H4.692a1.851,1.851,0,0,0,0,2.285Z" transform="translate(-1508 1241.443)" fill=""/>
                        <path id="" data-name="" d="M26.916,2.993h-3.1a1.851,1.851,0,0,0,0-2.287h3.1a1.143,1.143,0,1,1,0,2.287Zm-6.011,0H1.144a1.143,1.143,0,1,1,0-2.287H20.905a1.85,1.85,0,0,0,0,2.285Z" transform="translate(-1508 1250.135)" fill=""/>
                        <path id="" data-name="" d="M26.916,2.993H11.748a1.851,1.851,0,0,0,0-2.287H26.916a1.143,1.143,0,1,1,0,2.287Zm-18.077,0h-7.7a1.143,1.143,0,1,1,0-2.287h7.7a1.851,1.851,0,0,0,0,2.285Z" transform="translate(-1508 1258.828)" fill=""/>
                        <path id="" data-name="" d="M-3.383-7.5A4.122,4.122,0,0,1,.735-3.383,4.122,4.122,0,0,1-3.383.735,4.122,4.122,0,0,1-7.5-3.383,4.122,4.122,0,0,1-3.383-7.5Zm0,5.947a1.832,1.832,0,0,0,1.83-1.83,1.832,1.832,0,0,0-1.83-1.83,1.832,1.832,0,0,0-1.83,1.83A1.832,1.832,0,0,0-3.383-1.553Z" transform="translate(-1498.471 1246.675)" fill=""/>
                        <path id="" data-name="" d="M-3.353-7.5A4.152,4.152,0,0,1,.795-3.352,4.152,4.152,0,0,1-3.353.8,4.152,4.152,0,0,1-7.5-3.352,4.152,4.152,0,0,1-3.353-7.5Zm0,6.008a1.862,1.862,0,0,0,1.86-1.86,1.862,1.862,0,0,0-1.86-1.86,1.862,1.862,0,0,0-1.86,1.86A1.862,1.862,0,0,0-3.353-1.492Z" transform="translate(-1482.288 1255.337)" fill=""/>
                        <path id="" data-name="" d="M-3.353-7.5A4.152,4.152,0,0,1,.795-3.352,4.152,4.152,0,0,1-3.353.8,4.152,4.152,0,0,1-7.5-3.352,4.152,4.152,0,0,1-3.353-7.5Zm0,6.008a1.862,1.862,0,0,0,1.86-1.86,1.862,1.862,0,0,0-1.86-1.86,1.862,1.862,0,0,0-1.86,1.86A1.862,1.862,0,0,0-3.353-1.492Z" transform="translate(-1494.354 1264.03)" fill=""/>
                    </g>
                    <p data-i18n="Inventory_data:otherTitle.Filter">Filter</p>
                </svg>
            </div>
                            
            <aside class="marketPlaceSidebar Inventory-PPSR-Filter-Sidebar">
                <div class="marketPlaceSidebar-scroll">


                    <section class="Sidebar-Filter-Block" id="Filter-Header">
                        <div class="Filter-Header-title">
                                <span data-i18n="Inventory_data:otherTitle.Filter">Filter&nbsp;</span><span>(@FilterCount)</span>
                        </div>
                                     
                        <div class="Filter-Header-Block">
                            <button  hidden="@(false)" class="Filter-Button" id="Filter-Button-Reset">Reset</button>
                            <button  hidden="@(true)" class="Filter-heart btn p-0 tippy-pop" data-content="Favorite" >
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 22.001 20.005">
                                    <path class="heart__path"
                                        d="M11.445,20.761,3.576,12.566a5.762,5.762,0,0,1,.3-8.217,5.243,5.243,0,0,1,7.807.892L12,5.677l.314-.436a5.243,5.243,0,0,1,7.807-.892,5.762,5.762,0,0,1,.3,8.217l-7.869,8.194A.763.763,0,0,1,11.445,20.761Z"
                                        transform="translate(-0.999 -1.995)" stroke-linecap="round" stroke-linejoin="round"
                                        stroke-width="1.5" />
                                </svg>
                            </button>
                        </div>
                    </section>

                    <section  hidden="@(true)" class="Sidebar-Filter-Block" id="">

                        <label for="officialDebut" class="Sidebar-checkbox-label">
                            <input type="checkbox" id="officialDebut" class="Sidebar-checkbox">
                            <span>Only show the official debut</span>
                        </label>

                    </section>

                    <section  hidden="@(true)" class="Sidebar-Filter-Block" id="" >
                        <div class="Filter-Title">
                            <span>Price (ETH)</span>
                            <img class="Filter-arrow" src="/images/MarketPlace/MP-arrow-sm.webp" alt="">
                        </div>
                        <div class="Filter-Options Filter-Radio">
                            <div class="range-Input">
                                <input type="range" name="" id="PriceRange" min="0" max="20" value="20" oninput="textInputRange.value = this.value">
                            </div>
                            <div class="range-Text">
                                <div class="ra-range">0</div>
                                <output id="textInputRange">20</output>
                                <div class="ra-range">20</div>
                            </div>

                        </div>


                    </section>
                                    
                    <section  hidden="@(true)" class="Sidebar-Filter-Block" id="">
                        <div class="Filter-Title">
                            <span>Body Type</span>
                            <img class="Filter-arrow" src="/images/MarketPlace/MP-arrow-sm.webp" alt="">
                        </div>
                        <div class="Filter-Options Filter-Radio">
                            <div class="bodyType-radio d-inline position-relative bgBorder">
                                <input style="--step:0" class="ra" type="radio" name="test" id="BodyType-1" value="1">
                                <input style="--step:1" class="ra" type="radio" name="test" id="BodyType-1.1" value="1.1">
                                <input style="--step:2" class="ra" type="radio" name="test" id="BodyType-1.2" value="1.2">
                                <input style="--step:3" class="ra" type="radio" name="test" id="BodyType-1.3" value="1.3">
                                <input style="--step:4" class="ra" type="radio" name="test" id="BodyType-1.4" value="1.4">
                                <input style="--step:5" class="ra" type="radio" name="test" id="BodyType-1.5" value="1.5">
                                <input style="--step:6" class="ra" type="radio" name="test" id="BodyType-1.6" value="1.6">
                            </div>

                            <div class="bodyType-label">
                                <label class="ra-label" for="BodyType-1">1</label>
                                <label class="ra-label" for="BodyType-1.1">1.1</label>
                                <label class="ra-label" for="BodyType-1.2">1.2</label>
                                <label class="ra-label" for="BodyType-1.3">1.3</label>
                                <label class="ra-label" for="BodyType-1.4">1.4</label>
                                <label class="ra-label" for="BodyType-1.5">1.5</label>
                                <label class="ra-label" for="BodyType-1.6">1.6</label>
                            </div>
                        </div>


                    </section>

                    <section class="Sidebar-Filter-Block" id="">
                        <div class="Filter-Title">
                            <span data-i18n="Inventory_data:Filter.Rarity">Rarity</span>
                            <img class="Filter-arrow" src="/images/MarketPlace/MP-arrow-sm.webp" alt="">
                        </div>
                        <div class="Filter-Options">

                            @foreach (var item in RarityList)
                            {
                                var key = @item.Key;
                                <label class="Filter-Button" for="@item.Value">
                                    <span data-i18n="Inventory_data:@item.Datai18n">@item.Value</span>
                                </label>
                                <input id="@item.Value" class="Filter-Button-checkbox" type="checkbox" @onchange="eventArgs => { CheckboxRarityClicked(key, eventArgs.Value); }" />
                            }
                                            
                        </div>


                    </section>

                    <section class="Sidebar-Filter-Block" id="">
                        <div class="Filter-Title">
                            <span data-i18n="Inventory_data:Filter.Element">Element</span>
                            <img class="Filter-arrow" src="/images/MarketPlace/MP-arrow-sm.webp" alt="">
                        </div>
                        <div class="Filter-Options">

                            @foreach (var item in ElementsList)
                            {
                                var key = @item.Key;
                                <label class="Filter-Button" for="@item.Value">
                                    <span data-i18n="Inventory_data:@item.Datai18n">@item.Value</span>
                                </label>
                                <input id="@item.Value" class="Filter-Button-checkbox" type="checkbox" @onchange="eventArgs => { CheckboxElementsClicked(key, eventArgs.Value); }" />
                            }

                        </div>
                    </section>

                    <section hidden="@(true)" class="Sidebar-Filter-Block" id="">
                        <div class="Filter-Title">
                            <span data-i18n="Inventory_data:Filter.Class">Class</span>
                            <img class="Filter-arrow" src="/images/MarketPlace/MP-arrow-sm.webp" alt="">
                        </div>
                        <div class="Filter-Options">

                            @foreach (var item in ClassList)
                            {
                                var key = @item.Key;
                                <label class="Filter-Button" for="@item.Value">
                                    <span data-i18n="Inventory_data:@item.Datai18n">@item.Value</span>
                                </label>
                                <input id="@item.Value" class="Filter-Button-checkbox" type="checkbox" @onchange="eventArgs => { CheckboxClassClicked(key, eventArgs.Value); }" />
                            } 

                        </div>
                    </section>

                    <section hidden="@(true)" class="Sidebar-Filter-Block" id="">
                        <div class="Filter-Title">
                            <span>Country</span>
                            <img class="Filter-arrow" src="/images/MarketPlace/MP-arrow-sm.webp" alt="">
                        </div>
                        <div class="Filter-Options">

                            @foreach (var item in CountryList)
                            {
                                var key = @item.Key;
                                <label class="Filter-Button" for="@item.Value">
                                    <span data-i18n="Inventory_data:@item.Datai18n">@item.Value</span>
                                </label>
                                <input id="@item.Value"  class="Filter-Button-checkbox" type="checkbox" @onchange="eventArgs => { CheckboxCountryClicked(key, eventArgs.Value); }" />
                            }

                        </div>
                    </section>
                </div>
            </aside>
                            
        </div>

        @*下拉選單排序*@
        <select class="sortSelect Inventory-PPSR-sortSelect" name="count_adults" id=""  @onchange="(e => DoStuff(e))" > 

            <option disabled="" value="Sort"data-i18n="Inventory_data:sortOptions.Sort"  selected="" hidden="">Sort</option>
            <option value="Highest Earned"  data-i18n="Inventory_data:sortOptions.HighestEarned" >Highest Earned</option>
            <option value="Lowest Earned"   data-i18n="Inventory_data:sortOptions.LowestEarned" >Lowest Earned</option>
            <option value="Highest Price"   data-i18n="Inventory_data:sortOptions.HighestPrice" >Highest Price</option>
            <option value="Lowest Price"    data-i18n="Inventory_data:sortOptions.LowestPrice" >Lowest Price</option>
            <option value="Newest"          data-i18n="Inventory_data:sortOptions.Newest" >Newest</option>
            <option value="Oldest"          data-i18n="Inventory_data:sortOptions.Oldest"  >Oldest</option>

        </select>
    </div>
              
    <div class="Inventory-CardBLock">
                        
        @* 如果Card為0張時顯示導購連結，1張以上隱藏 *@
        <div class="IfNoCard">
            <a href="MarketPlace" data-i18n="Inventory_data:otherTitle.BuyPPSR">Buy PPSR >></a>
        </div>                       

        @if(NFTDataList != null){
            @foreach( NFTData item in NFTDataList)
            {
                string TokenID = @item.TokenID;
                decimal totalRevenue =  @item.totalRevenue;
                if (@item.IsOfficial)
                {
                    if (@item.IsOpen)
                    {
                        @*官方首拍 紅色*@
                        <div class="NFTcard card-bg-red">
                            <Inventory_NFTcard Value="@item" setValueByUnit="setValueByUnit" ReceiveRentByUnitOnclick="ReceiveRentByUnitOnclick"  />
                        </div>
                    }
                    else
                    {
                        @*官方 預定販售NFT*@                                       
                        <div class="NFTcard card-bg-grey">
                            <Inventory_NFTcard Value="@item" setValueByUnit="setValueByUnit" ReceiveRentByUnitOnclick="ReceiveRentByUnitOnclick"  />
                        </div>                                        
                    }
                }
                else
                {
                    if(@item.IsOpen){     
                        @*個人持有 NFT*@     
                        <div class="NFTcard card-bg-green">
                            <Inventory_NFTcard Value="@item" setValueByUnit="setValueByUnit" ReceiveRentByUnitOnclick="ReceiveRentByUnitOnclick"  />
                        </div>                            
                    }
                }        
            }
        }
    </div>
    @*頁碼*@
    <div class="Pagination-Block">                        
        <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" /> 
    </div>
</div>

@*全部領 彈窗*@
@if (AllPopShow)
{
    <Inventory_AllCollectPop  GoldCollectBalance=@GoldCollectBalance SRCCollectBalance=@SRCCollectBalance ReceiveRent="ReceiveRent" closeAllPopShow ="closeAllPopShow"></Inventory_AllCollectPop>
}


@*個別領 彈窗*@
@if (SingelPopShow)
{
    <Inventory_SingelAllCollectPop Value=@SRCCollectBalance  ReceiveRentByUnit="ReceiveRentByUnit" toggleSingelPopShow="toggleSingelPopShow"></Inventory_SingelAllCollectPop>
}

@if (loading)
{
    <FectchDataLoading />    
}
 
@code {
    @*四個貨幣 SRC ERNC(遊戲、鏈上)*@
    [Parameter]
    public CoinData Value { get; set; }


    @*filter*@
    //計算filter選擇數量
    private int FilterCount = 0;
    // 稀有度
    private List<OptionKeyValue> RarityList = new List<OptionKeyValue>();  
    /// 屬性  
    private List<OptionKeyValue> ElementsList = new List<OptionKeyValue>();
    /// 職業專精  
    private List<OptionKeyValue> ClassList= new List<OptionKeyValue>(); 
    /// 國家
    private List<OptionKeyValue> CountryList= new List<OptionKeyValue>();

    public List<string> CheckBoxRarity { get; set; } = new List<string>();
    public List<string> CheckBoxElements { get; set; } = new List<string>();
    public List<string> CheckBoxClass { get; set; } = new List<string>();
    public List<string> CheckBoxCountry { get; set; } = new List<string>();

    private async void CheckboxRarityClicked(string CheckID, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            if (!CheckBoxRarity.Contains(CheckID))
            {
                CheckBoxRarity.Add(CheckID);
                CountFilterSelected();
            }
        }
        else
        {
            if (CheckBoxRarity.Contains(CheckID))
            {
                CheckBoxRarity.Remove(CheckID);
                CountFilterSelected();
            }
        }
        await GetFilter();
    }

    private async void CheckboxElementsClicked(string CheckID, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            if (!CheckBoxElements.Contains(CheckID))
            {
                CheckBoxElements.Add(CheckID);
                CountFilterSelected();
            }
        }
        else
        {
            if (CheckBoxElements.Contains(CheckID))
            {
                CheckBoxElements.Remove(CheckID);
                CountFilterSelected();
            }
        }
        await  GetFilter();
    }


    private async void CheckboxClassClicked(string CheckID, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            if (!CheckBoxClass.Contains(CheckID))
            {
                CheckBoxClass.Add(CheckID);
                CountFilterSelected();
            }
        }
        else
        {
            if (CheckBoxClass.Contains(CheckID))
            {
                CheckBoxClass.Remove(CheckID);
                CountFilterSelected();
            }
        }
        await GetFilter();
    }


    private async void CheckboxCountryClicked(string CheckID, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            if (!CheckBoxCountry.Contains(CheckID))
            {
                CheckBoxCountry.Add(CheckID);
                CountFilterSelected();
            }
        }
        else
        {
            if (CheckBoxCountry.Contains(CheckID))
            {
                CheckBoxCountry.Remove(CheckID);
                CountFilterSelected();
            }
        }
        await GetFilter();
    }

    private async Task GetFilter()
    { 
        PagedList<NFTData> pagelist = await InventoryService.Get_NFT_by_Filter( 1,10 ,CheckBoxRarity ,CheckBoxElements , CheckBoxClass ,CheckBoxCountry);
        NFTDataList = pagelist;
        MetaData = pagelist.MetaData;
        PPSRsCount = MetaData.TotalCount;
    }

    private void CountFilterSelected()
    {
        FilterCount = CheckBoxRarity.Count() + CheckBoxElements.Count() + CheckBoxClass.Count() ;// + CheckBoxCountry.Count();
    }

    @*下拉選單排序*@
    private async Task DoStuff(ChangeEventArgs e)
    {        
        PagedList<NFTData> pagelist=await InventoryService.GetRiderNFTDataListOrderby( e.Value.ToString() ,1 ,10);

        MetaData =  pagelist.MetaData;
        NFTDataList = pagelist;
        PPSRsCount = MetaData.TotalCount;
        StateHasChanged();
    }
    
    @*NFT卡片顯示*@
    //NFT的List
    private List<NFTData> NFTDataList;
    //個別卡片的ID
    public string TokenID { get;set;}
    //彈窗顯示領取SRC租金的金額
    private decimal SRCCollectBalance  = 600; 
    //彈窗顯示領取Gold租金的金額
    private decimal GoldCollectBalance  = 600; 
    //所有領取租金數量
    private decimal AllBalance = 0;
    //所有領取租金數量
    private decimal AllGoldBalance = 0;
    //計算租金加總後的SRC數量
    private decimal TotalSRCCount = 0;
    //計算租金加總後的星鑽數量
    private decimal TotalGoldCount = 0;
    //碰碰蛇騎士數量
    private int PPSRsCount;  
    //跳錢JS
    private IJSObjectReference? RentJumpJS;

    //等待彈窗
    bool loading = false;
    //顯示全部領取彈窗
    bool AllPopShow =false;
    public void closeAllPopShow()
    {
        AllPopShow = false;

    }

    //顯示單獨領取彈窗
    bool SingelPopShow = false;
    public void toggleSingelPopShow(bool value)
    {
        SingelPopShow = value;

    }

    //個別領取按鈕變更資料
    private async void setValueByUnit( NFTCardData NFTCard)
    {
        toggleSingelPopShow(true);
        TokenID = NFTCard.ppsr;
        SRCCollectBalance = NFTCard.totalRevenue;
    }
    //全部領取按鈕變更資料
    private async void setValue( object onClickValue)
    {
        loading = true;
        string UserID = AppState.LoginStatus.userID.ToString();
        SRCCollectBalance = await InventoryService.CalReceiveRent(UserID);
        GoldCollectBalance =  await InventoryService.CalReceiveRentGold(UserID);
        AllPopShow = true;
        if (AllPopShow)
        {
            loading = false;
        }
        //強制渲染
        await InvokeAsync(StateHasChanged);
    }

    //個別租金彈窗
    //是否彈窗勾選
    private bool ShowMSGState = false; 
    public async Task ReceiveRentByUnit()
    {
        toggleSingelPopShow(true);
        ShowMSGState = await JS.InvokeAsync<bool>("getShowMSGState"); 
        string UserID = AppState.LoginStatus.userID.ToString();
        List<totalRevenue> Rent = await InventoryService.ReceiveRentByUnit(UserID ,TokenID );
        //if (RentJumpJS != null)
        //{
        //    await RentJumpJS.InvokeVoidAsync("RentJump", TotalSRCCount, TotalSRCCount + Rent);
        //}
        if (Rent.Count > 0)
        {
            TotalSRCCount = TotalSRCCount + Rent.Where(m => m.currencyType == 22).First().price;
            TotalSRCCount = Math.Round(TotalSRCCount, 3, MidpointRounding.AwayFromZero);
            TotalGoldCount = TotalGoldCount +  Rent.Where(m => m.currencyType == 1).First().price;
            TotalGoldCount = Math.Round(TotalGoldCount, 3, MidpointRounding.AwayFromZero);
        }
        Value.gSRCchange( TotalSRCCount);
        Value.SetGoldChange(TotalGoldCount);
        AllBalance = await InventoryService.CalReceiveRent(UserID);
        AllGoldBalance = await InventoryService.CalReceiveRentGold(UserID);
        StateHasChanged();
        Refresh();

    }
    public void  ReceiveRentByUnitOnclick()
    {
        if (ShowMSGState)
        {
            ReceiveRentByUnit();
        }
    }

    //全部租金彈窗
    public async Task ReceiveRent( )
    {
        closeAllPopShow();
        string UserID = AppState.LoginStatus.userID.ToString();
        List<totalRevenue> Rent =  await InventoryService.ReceiveRent(UserID  );
      @*  if (RentJumpJS != null)
        {
            await RentJumpJS.InvokeVoidAsync("RentJump", TotalSRCCount, TotalSRCCount + Rent);
        }*@
        

        if (Rent.Count > 0)
        {
            TotalSRCCount = TotalSRCCount + Rent.Where(m => m.currencyType == 22).First().price;
            TotalSRCCount = Math.Round(TotalSRCCount, 3, MidpointRounding.AwayFromZero);
            TotalGoldCount = TotalGoldCount +  Rent.Where(m => m.currencyType == 1).First().price;
            TotalGoldCount = Math.Round(TotalGoldCount, 3, MidpointRounding.AwayFromZero);
        }


        AllBalance = await InventoryService.CalReceiveRent(UserID);
        AllGoldBalance = await InventoryService.CalReceiveRentGold(UserID);

        Refresh();
    }

    @*頁碼的內容*@
    public MetaData MetaData { get; set; } = new MetaData();

    private async Task SelectedPage(int page)
    {
        await GetRiderNFTDataPageList(page);
        StateHasChanged();
    }

    private async Task GetRiderNFTDataPageList(int page)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var LoginUser = authState.User;
        string UserID = LoginUser.FindFirst("UserID")?.Value; //AppState.LoginStatus.userID.ToString();
        string contractAddress_PPSR =  BlockChainSever.BlockChainInfoDTO.contractAddress_PPSR;
        string OpenSeaLink =  BlockChainSever.BlockChainInfoDTO.openSeaLink;
        PagedList<NFTData> pagelist = await InventoryService.GetRiderNFTDataPageList(UserID , page,10 ,contractAddress_PPSR ,OpenSeaLink);
        NFTDataList = pagelist;
        MetaData = pagelist.MetaData;
        PPSRsCount = MetaData.TotalCount;
    }

    @*生命週期*@
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            await Refresh();
            RentJumpJS = await JS.InvokeAsync<IJSObjectReference>("import","./JavaScript/MyProfile/InventoryAndMarketPlace/RentJump.js");
            await JS.InvokeVoidAsync("InventoryFilterSidebarClick");
            await JS.InvokeVoidAsync("installI18n");
            await JS.InvokeVoidAsync("CollectBtnPoP");   
        }
    }

     private async Task Refresh()
    {   
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var LoginUser = authState.User;
        string UserID = LoginUser.FindFirst("UserID")?.Value; //AppState.LoginStatus.userID.ToString();

        RarityList = await InventoryService.Get_Default_Rarity();
        ElementsList = await InventoryService.Get_Default_Elements();
        ClassList = await InventoryService.Get_Default_Class();
        CountryList = await InventoryService.Get_Default_Country();
        string contractAddress_PPSR =  BlockChainSever.BlockChainInfoDTO.contractAddress_PPSR;
        string OpenSeaLink =  BlockChainSever.BlockChainInfoDTO.openSeaLink;
        PagedList<NFTData> pagelist = await InventoryService.GetRiderNFTDataPageList(UserID, 1,10 ,contractAddress_PPSR, OpenSeaLink);
        NFTDataList = pagelist;

        MetaData =  pagelist.MetaData;

        TotalSRCCount = decimal.Parse( AppState.LoginStatus.nftCurrency1.ToString());
        PPSRsCount = MetaData.TotalCount;

        AllBalance = await InventoryService.CalReceiveRent(UserID);
        AllGoldBalance = await InventoryService.CalReceiveRentGold(UserID);

        Value.gSRCchange ( await InventoryService.GetgSRCCurrency1(UserID,22) );
        StateHasChanged();
    }
  }
