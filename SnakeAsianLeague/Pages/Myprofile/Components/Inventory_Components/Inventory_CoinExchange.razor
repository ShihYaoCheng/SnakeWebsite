@inject IJSRuntime JS
@using SnakeAsianLeague.Data.Entity.View
@using SnakeAsianLeague.Data.Services
@using SnakeAsianLeague.Data.Services.Metamask
@using RestSharp;
@using SnakeAsianLeague.Data.Services.Personal

@inject IConfiguration Configuration
@inject AppState AppState
@inject InventoryService InventoryService
@inject MetamaskTransfer metamaskTransfer 

<head>
    <link href="css/MyProfile/coinExchange.css" rel="stylesheet" />
</head>

<div class="coinEchange-container">
    <div class="coinEchange">
         @* <button id="coinEchangeCancel" class="coinEchange-CancelBtn"></button> *@
         <svg @onclick="reSet" class="products-popup-close"  id="coinEchangeCancel" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 25 25" width="25">
                <path id="" data-name="" d="M10,10,0,20,10,10,0,0,10,10,20,0,10,10,20,20Z" transform="translate(2.5 2.5)"
                    fill="none" stroke="#67ada2" stroke-linecap="round" stroke-linejoin="round" stroke-width="5" />
            </svg>

        <div class="coinNum-Container">
             <div class="coinNum-beteen">
                 <div class="coinTop">
                    <img class="coinEchange-Icon" src="/images/Myprofile/@(Value.imgUrl).webp" alt="">
                    <p class="coinTitle" data-i18n="Inventory_data:otherTitle.@Value.gTitle"></p>
                    <p class="coinTotalNum" >@Value.gNumber</p>
                 </div>

     
             </div>
             <div class="coinNum-mid">
                 <div class="coinTop doubleArrow">
                      <img src="/images/Myprofile/doubleArrow.png"/>
                 </div>
                
             </div>
              <div class="coinNum-beteen">
                 <div class="coinTop">
                    <img class="coinEchange-Icon" src="/images/Myprofile/@(Value.imgUrl).webp" alt="">                                     
                    <p class="coinTitle" data-i18n="Inventory_data:otherTitle.@Value.tokenTitle" ></p>
                    <p class="coinTotalNum">@Value.tokenNumber</p>
                 </div>
     
             </div>
        </div>
        <input class="coin-range" step="1" value="@rangeValue"  @onchange="(ChangeEventArgs e)=> coinRange(e)" type="range" min="-@Value.tokenNumber" max="@Value.gNumber"  />
   
        <div class="replacedCoin-zone" >
            <div class="left">
                 <input class="replacedCoin" value="@Value.gNumberChange" @onchange="(ChangeEventArgs e)=> coinInput(e ,true)" />
                    
              
                 <div class="increaseCoin" id="GSRCincrease">
                    @GSRCincrease
                 </div>  
            </div>
            <div class="mid"></div>
            <div class="right">
                 <input class="replacedCoin" value="@Value.tokenNumberChange" @onchange="(ChangeEventArgs e)=> coinInput(e,false)" />
                   
                        
                 <div class="increaseCoin"  id="SRCincrease" >
                    @SRCincrease
                 </div>   
            </div>
        </div>
     @*   <p class="increaseCoin" id="gSRCincrease"> </p>  *@
      
       <div class="coinEchange-BtnZone" >
           <button  id="coinEchangeBtn" class="coinEchange-ExchangeBtn" @onclick="coinEchangeBtn" data-i18n="Inventory_data:otherTitle.Exchange">Exchange</button>
        @*  <button  @onclick="SRCExchangeAllowanceClick">SRCExchangeAllowance </button>
           <button  @onclick="blockChainInfoDTOClick">blockChainInfoDTOClick </button>
           <div>
               <p>SRCExchangeAllowance Data</p>
               <p>@aa</p>
           </div>
            <div>
               <p>blockChainInfoDTO Data</p>
               <p>@bb</p>
           </div>*@
       </div>
    </div>

</div>
@code {
    //private readonly RestRequest test2 = new RestRequest("BackEnd/Accounts", Method.GET);
    [Parameter]
    public EventCallback refresh { get; set;}
    private async Task clickRefresh()
    {
        await refresh.InvokeAsync();   
    }


    [Parameter]
    public ExchangeCoin? Value { get; set; }

    private IJSObjectReference? coinEchangeJS;
    decimal difference=0;
    decimal rangeValue = 0;
    decimal GSRCincrease = 0;
    decimal SRCincrease = 0;
    //private MetamaskTransfer metamaskTransfer ;
    //private InventoryService inventoryService;

    //private InventoryService blockChainInfoDTO  ;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            @*
            var request = new RestRequest(test2.Resource, test2.Method);
            Console.Write(request);*@
            coinEchangeJS = await JS.InvokeAsync<IJSObjectReference>("import","./JavaScript/MyProfile/InventoryAndMarketPlace/coinEchange.js");
            await coinEchangeJS.InvokeVoidAsync("coinEchange" ,".ExchangeBtn");

        }
    }

    public void coinRange  (ChangeEventArgs value)
    {

        difference=decimal.Parse(value.Value.ToString());
        if(difference > 0)
        {
            difference= Math.Ceiling(decimal.Parse(value.Value.ToString()));
            if (Value.gNumber <  difference)
            {
                difference = Value.gNumber;
            }
        }
        else{
            difference =Math.Floor(decimal.Parse(value.Value.ToString()));
            if (-Value.tokenNumber > difference)
            {
                difference = -Value.tokenNumber;
            }
        }
        Value.gNumberChange = Value.gNumber- difference;
        Value.tokenNumberChange = Value.tokenNumber + difference;

        GSRCincrease = -difference;
        SRCincrease = difference;
    }

    public void coinInput(ChangeEventArgs value ,bool SRCcheck)
    {
        //GSRC
        if (SRCcheck)
        {
            if ( Value.gNumber - decimal.Parse(value.Value.ToString())<0){
                difference = 0;                    
            }
            else
            {
                difference  =  Value.gNumber - decimal.Parse(value.Value.ToString());               
            }


        }
        else
        {
            if (Value.tokenNumber - decimal.Parse(value.Value.ToString()) < 0)
            {
                difference = 0;          
            }
            else
            {
                difference  = -( Value.tokenNumber - decimal.Parse(value.Value.ToString()));
            }


        }
        Value.gNumberChange = Value.gNumber- difference;
        Value.tokenNumberChange = Value.tokenNumber + difference;
        rangeValue = difference;

        GSRCincrease = -difference;
        SRCincrease = difference;

        if(difference ==0)
        {

            InvokeAsync(StateHasChanged);
        }
    }
    @* TaskCompletionSource<bool>taskCompletionSource = new TaskCompletionSource<bool>();*@
    bool transactionResult = false;
    decimal getAuthorizeNum ;
    protected  async Task coinEchangeBtn()
    {
        await coinEchangeJS.InvokeVoidAsync("lockWindowsShow");
        if (difference < 0)
        {
          
            @*鍊換game*@           
            transactionResult =await coinEchangeJS.InvokeAsync<bool>("withdraw", difference *-1,Configuration["SRC_token_addr"],Configuration["SRCExchange_addr"]);      
            if (transactionResult)
            {
                await metamaskTransfer.SRCTransferToDB(AppState.LoginStatus.userID, difference *-1);
            }
             
            await clickRefresh();
        }
        else
        {
            @*game換鍊*@
            getAuthorizeNum = await InventoryService.SRCExchangeApprove(AppState.LoginStatus.userID.ToString() ,difference);
            if (getAuthorizeNum!=0)
            {
                transactionResult =await coinEchangeJS.InvokeAsync<bool>("deposit", getAuthorizeNum,Configuration["SRC_token_addr"],Configuration["SRCExchange_addr"] );
            }
            else
            {
                transactionResult = false;
            }          
            if (transactionResult)
            {
                await clickRefresh();
            }


        }
        //強制渲染
        await reSet();
    }
    public async Task reSet()
    {
        difference=0;
        rangeValue = 0;
        GSRCincrease = 0;
        SRCincrease = 0;
        await coinEchangeJS.InvokeVoidAsync("lockWindowsHide");
    }

    //decimal aa;
    //string bb;
    //protected async void SRCExchangeAllowanceClick()
    //{
    //    aa = await InventoryService.SRCExchangeAllowance("0x3DD8F133C30cbc84B246f56cf8659B21595803a5");
    //      InvokeAsync(StateHasChanged);
    //}
    //protected async void blockChainInfoDTOClick()
    //{
    //    bb =await InventoryService.BlockChainInfo();
    //      InvokeAsync(StateHasChanged);
    //}
    

}

