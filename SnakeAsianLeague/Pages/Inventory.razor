@*@page "/myprofile/inventory"*@
@using SnakeAsianLeague.Data.Entity
@using SnakeAsianLeague.Data.Paging
@using SnakeAsianLeague.Data.Services
@using SnakeAsianLeague.Data.Services.MarketPlace
@using SnakeAsianLeague.Data.Services.Personal
@using SnakeAsianLeague.Data.Entity.View
@using Microsoft.AspNetCore.Components.Authorization
@using SnakeAsianLeague.Pages.Myprofile.Components.Inventory_Components
@using SnakeAsianLeague.Pages.Myprofile.Components.Shared_Components
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject InventoryService InventoryService
@inject AppState AppState
@inject IConfiguration Configuration

@implements IDisposable


<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link href="css/NFTFilter.css" rel="stylesheet" />
    <link href="css/MarketPlace.css" rel="stylesheet" />
    <link href="css/Sidebar.css" rel="stylesheet" />
    <link href="css/Pagination.css" rel="stylesheet" />
    <link href="css/Inventory.css" rel="stylesheet" />   
    <link href="css/Popup.css" rel="stylesheet" />
    <link href="//maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
    <title>PonPonSnake 碰碰蛇｜Inventory</title>
</head>
        <div class="inventory-Background"></div>
        
         @*右上角顯示錢包地址*@
        @if (islogin)
        {
            <Walletaddress></Walletaddress>
        }
        <div class="Inventory-Block">
            <div class="Inventory">
                <div class="Inventory-Title" data-i18n="Sidebar.Inventory">Inventory</div>

                @*exchange區塊*@
                <div class="Secend-Block">  
                        <Inventory_Exchange Value="CoinData" refresh="refresh" />  
                </div>

                @*切換區塊*@
                <div class="Secend-Block">
                        <NFT_Type />
                </div>
                <Inventory_PPSR Value="CoinData"/>
              
            </div>
        </div>


    @*交易中反灰*@
    <TransactWindow></TransactWindow>

    @*錯誤訊息*@
    @if (islogin && !(netWorkRight))
    {
        <ErrorNetwork AddPolygon ="AddPolygon" Value =@netWorkName></ErrorNetwork>
    }
    @*載入畫面*@
    @if (loading && islogin)
    {
        <FectchDataLoading />    
    }

@code {
    //是否登入
     [CascadingParameter] bool islogin { get; set; }
    //loading
    bool loading = true; 
    //錢包鍊是否正確
    bool netWorkRight = false;
    string netWorkName = "";

    //四個貨幣 SRC ERNC(遊戲、鏈上)
    public CoinData CoinData = new CoinData(0, 0, 0, 0);
    //取得JS獲得的錢包資訊
    string[] JSCoinData;
    //取得錢包資訊
    private async Task getCoinData()
    {
        JSCoinData = await coinEchangeJS.InvokeAsync<string[]>("CoinexchangeData"  ,Configuration["chainId"], Configuration["SRC_token_addr"]);
        CoinData.tokenSRCchange(decimal.Parse(JSCoinData[1]));

         if (netWorkRight !=  Convert.ToBoolean(JSCoinData[0]))
        {
             netWorkRight =  Convert.ToBoolean(JSCoinData[0]);
             //強制渲染
            await InvokeAsync(StateHasChanged);
        }
    }
    //切換並新增Polygon
    protected  async Task AddPolygon()
    {
        @*linebot.SemdLineNotifyMsg("test123");*@
        await JS.InvokeVoidAsync("AddPolygonID",Configuration["chainId"], Configuration["chainName"],  Configuration["recUrls"] );
        await getCoinData();
    }

    private IJSObjectReference? coinEchangeJS;

    protected override async Task OnInitializedAsync()
    {

        AppState.StateChanged += async (Source, Property)
        => await InvokeAsync(StateHasChanged);

    } 

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await getGameCoin();
            @* await JS.InvokeVoidAsync("myprofileSidebar"); *@
            await JS.InvokeVoidAsync("installI18n");
            await JS.InvokeVoidAsync("heartClick");
            await JS.InvokeVoidAsync("FilterButtonClick");
            await JS.InvokeVoidAsync("FilterArrowSlideClick");
           
            await JS.InvokeVoidAsync("CardAmountLinkDisplay");
            await JS.InvokeVoidAsync("TippyInit");

            await JS.InvokeVoidAsync("NFTcardAClick");    
            await JS.InvokeVoidAsync("CollectBtnPoP");   
            await JS.InvokeVoidAsync("ShowMSGcheckbox");    

            await JS.InvokeVoidAsync("showTag");
            netWorkName = Configuration["chainName"];
            if (islogin)
            {     
                coinEchangeJS =  await JS.InvokeAsync<IJSObjectReference>("import","./JavaScript/MyProfile/InventoryAndMarketPlace/coinEchange.js");
                await getCoinData();
            }



            await loadingColse();
        }
    }

    private async Task loadingColse()
    {
        if (loading == true)
        {
            loading = false;
            //強制渲染
            InvokeAsync(StateHasChanged);
        } 
    }


    void IDisposable.Dispose()
    {
        AppState.StateChanged -= async (Source, Property)
        => await InvokeAsync(StateHasChanged);
    }

    public async Task getGameCoin()
    {
         var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
         var LoginUser = authState.User;
         string UserID = LoginUser.FindFirst("UserID")?.Value; //AppState.LoginStatus.userID.ToString();
         CoinData.gSRCchange ( await InventoryService.GetgSRCCurrency1(UserID));
    }

    //強制渲染的方法
    public async Task refresh()
    {
        await getGameCoin();
        await getCoinData();
        await InvokeAsync(StateHasChanged);
    }
    //重載多語系
    public async Task reInstallI18n() { 
        await JS.InvokeVoidAsync("installI18n");
    }
}