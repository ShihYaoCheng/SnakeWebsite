@*@page "/myprofile/inventory"*@
@using SnakeAsianLeague.Data.Entity
@using SnakeAsianLeague.Data.Paging
@using SnakeAsianLeague.Data.Services
@using SnakeAsianLeague.Data.Services.BlockChain
@using SnakeAsianLeague.Data.Services.MarketPlace
@using SnakeAsianLeague.Data.Services.Personal
@using SnakeAsianLeague.Data.Entity.View
@using Microsoft.AspNetCore.Components.Authorization
@using SnakeAsianLeague.Pages.Myprofile.Components.Inventory_Components
@using SnakeAsianLeague.Pages.Myprofile.Components.Shared_Components
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject InventoryService InventoryService
@inject BlockChainProcessorSever BlockChainSever
@inject AppState AppState
@inject IConfiguration Configuration

@implements IDisposable


<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link href="css/NFTFilter.css" rel="stylesheet" />
    <link href="css/MarketPlace.css" rel="stylesheet" />
    <link href="css/Sidebar.css" rel="stylesheet" />
    <link href="css/Pagination.css" rel="stylesheet" />
    <link href="css/Inventory.css" rel="stylesheet" />   
    <link href="css/Popup.css" rel="stylesheet" />
    <link href="css/MyProfile/Inventory_arrow.css" rel="stylesheet" />
    <link href="//maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
    <title>PonPonSnake 碰碰蛇｜Inventory</title>
</head>
        <div class="inventory-Background"></div>
        
         @*右上角顯示錢包地址*@
        @if (AppState.LoginStatus.IsLogin)
        {
            <Walletaddress></Walletaddress>
        }
        <div class="Inventory-Block">
            <div class="Inventory">
                <div class="Inventory-Title" data-i18n="Sidebar.Inventory">Inventory</div>

                @*exchange區塊*@
                <div class="Secend-Block">  
                        <Inventory_Exchange CoinData=@CoinData refresh="refresh" />  
                </div>

                @*切換區塊*@
                <div class="Secend-Block">
                        <NFT_Type  toggleType="toggleType"/>
                </div>
        @switch (NFTtype)
        {
            case 0:
                <Inventory_PPSR Value="CoinData"/>
                break;
            case 1:
                <Inventory_BlueMap />
                break;
            case 2:
                <Inventory_landgrave />
            break;
        }
        
              
            </div>
        </div>


    @*交易中反灰*@
    <TransactWindow refresh="refresh"></TransactWindow>

    @*錯誤訊息*@
    @if (AppState.LoginStatus.IsLogin )
    {
        <ErrorNetwork AddPolygon ="AddPolygon"  getCoinData="getCoinData"></ErrorNetwork>
    }
    @*載入畫面*@
    @if (loading && AppState.LoginStatus.IsLogin)
    {
        <FectchDataLoading />    
    }

@code {

    //預熱活動開關
    bool warmUpToggle;
    //loading
    bool loading = true;  

    //四個貨幣 SRC ERNC(遊戲、鏈上)
    public CoinData CoinData = new CoinData(0, 0, 0, 0 , 0);
    //取得JS獲得的錢包資訊
    decimal JSCoinData;
    //取得錢包資訊
    private async Task getCoinData()
    {
        int chainId = BlockChainSever.BlockChainInfoDTO.chainId;
        //預熱活動用 修改
        var SRC_token_addr = BlockChainSever.BlockChainInfoDTO.contractAddress_SRC;
        if (warmUpToggle)
        {
            SRC_token_addr = BlockChainSever.BlockChainInfoDTO.contractAddress_tSRC;
        }     

        string chainRPCUrl = BlockChainSever.BlockChainInfoDTO.chainRPCUrl;

        JSCoinData = await coinEchangeJS.InvokeAsync<decimal>("CoinexchangeData"  ,chainId, SRC_token_addr , chainRPCUrl);
        CoinData.tokenSRCchange(JSCoinData);         
    }
    //切換並新增Polygon
    protected  async Task AddPolygon()
    {      
        int chainId = BlockChainSever.BlockChainInfoDTO.chainId;
        var chainName = BlockChainSever.BlockChainInfoDTO.blockChain;
        var recUrls = BlockChainSever.BlockChainInfoDTO.chainRPCUrl;
        var nativeCurrencyName = BlockChainSever.BlockChainInfoDTO.nativeCurrencyName;
        int nativeCurrencyDecimals = BlockChainSever.BlockChainInfoDTO.nativeCurrencyDecimals;

        await JS.InvokeVoidAsync("AddPolygonID",chainId, chainName,  recUrls ,  nativeCurrencyName,  nativeCurrencyDecimals);
        await getCoinData();
    }

    private IJSObjectReference? coinEchangeJS;

    protected override async Task OnInitializedAsync()
    {

        AppState.StateChanged += async (Source, Property)
        => await InvokeAsync(StateHasChanged);
        //預熱活動用
        warmUpToggle = BlockChainSever.BlockChainInfoDTO.eventWarmUpStatus20221108;
    } 

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (AppState.LoginStatus.IsLogin)
            {     
                coinEchangeJS =  await JS.InvokeAsync<IJSObjectReference>("import","./JavaScript/MyProfile/InventoryAndMarketPlace/coinEchange.js");
                await getGameCoin();
              
            }
            @* await JS.InvokeVoidAsync("myprofileSidebar"); *@
            await JS.InvokeVoidAsync("installI18n");
            await JS.InvokeVoidAsync("heartClick");
            await JS.InvokeVoidAsync("FilterButtonClick");
            await JS.InvokeVoidAsync("FilterArrowSlideClick");

            await JS.InvokeVoidAsync("CardAmountLinkDisplay");
            await JS.InvokeVoidAsync("TippyInit");           

            await JS.InvokeVoidAsync("ShowMSGcheckbox");     

          
            await loadingColse();
        }
    }

    private async Task loadingColse()
    {
        if (loading == true)
        {
            loading = false;
            //強制渲染
            InvokeAsync(StateHasChanged);
        } 
    }


    void IDisposable.Dispose()
    {
        AppState.StateChanged -= async (Source, Property)
        => await InvokeAsync(StateHasChanged);
    }

    public async Task getGameCoin()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var LoginUser = authState.User;
        string UserID = LoginUser.FindFirst("UserID")?.Value; //AppState.LoginStatus.userID.ToString();
        CoinData.gSRCchange ( await InventoryService.GetgSRCCurrency1(UserID ,22));
        CoinData.SetGoldChange( await InventoryService.GetgSRCCurrency1(UserID ,1));
    }

    //強制渲染的方法
    public async Task refresh()
    {
        await getGameCoin();
        await getCoinData();
        await InvokeAsync(StateHasChanged);
    }
    //重載多語系
    public async Task reInstallI18n() { 
        await JS.InvokeVoidAsync("installI18n");
    }

    int NFTtype;
    public void toggleType(int value)
    {
        NFTtype = value;
    }
}