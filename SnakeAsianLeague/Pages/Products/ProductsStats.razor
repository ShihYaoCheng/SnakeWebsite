@using SnakeAsianLeague.Data.Entity
@using SnakeAsianLeague.Data.Services.Products
@inject ProductsService ProductsService;


@if (Ridder.Stats != null)
{
    <section class="products-section" id="products-Stats">
        <div class="products-block">
            <div class="products-block-title">Stats</div>
            <div class="products-block-02" id="products-block-02-Stats">
                <div class="products-box-block">
                    @* 實際屬性及值由後端串接生成 *@
                    <div class="products-propertyCellreact">
                        <div class="products-property-type">HP</div>
                        <div class="products-property-value">@Ridder.Stats.HP</div>
                    </div>

                    <div class="products-propertyCellreact">
                        <div class="products-property-type">Attack</div>
                        <div class="products-property-value">@Ridder.Stats.Attack</div>
                    </div>

                    <div class="products-propertyCellreact">
                        <div class="products-property-type">Dexterity</div>
                        <div class="products-property-value">@Ridder.Stats.Dexterity.ToString("0.000")</div>
                    </div>

                    <div class="products-propertyCellreact">
                        <div class="products-property-type">Moving Speed</div>
                        <div class="products-property-value">@Ridder.Stats.MovingSpeed.ToString("0.000")</div>
                    </div>

                    <div class="products-propertyCellreact">
                        <div class="products-property-type">Attacking Speed</div>
                        <div class="products-property-value">@Ridder.Stats.AttackingSpeed</div>
                    </div>

                    <div class="products-propertyCellreact">
                        <div class="products-property-type">Stamina</div>
                        <div class="products-property-value">@Ridder.Stats.Stamina</div>
                    </div>

                    <div class="products-propertyCellreact">
                        <div class="products-property-type">Critical Chance</div>
                        <div class="products-property-value">@Ridder.Stats.CriticalChance</div>
                    </div>

                    <div class="products-propertyCellreact">
                        <div class="products-property-type">Element effect</div>
                        <div class="products-property-value">@Ridder.Stats.ElementEffect</div>
                    </div>
                </div>
            </div>
        </div>
    </section>
}

@code{
     [Parameter]
    public RiderIntroduce Ridder { get; set; }
    protected override async Task OnInitializedAsync()
    {
        
        await Refresh();
    }

    private async Task Refresh()
    {       
        Ridder =await ProductsService.Get_RiderIntroduce();
        StateHasChanged();
    }
}