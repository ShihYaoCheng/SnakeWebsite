@page "/Register"
@using SnakeAsianLeague.Data.Services
@using SnakeAsianLeague.Data.Entity.SnakeServer
@using SnakeAsianLeague.Data.Entity

@inject IAuthService AuthService
@inject IJSRuntime JS
@inject AppState AppState
@implements IDisposable
@inject AuthenticationStateProvider AuthenticationStateProvider

<head>
    <link href="/css/NFTindex/NFTindex_Register.css" rel="stylesheet" />
</head>




@* 註冊按鈕 *@
<div class="Register-submit button-hover" @onclick="@SendVerifyCode">
    <span data-i18n="Home_data:register.registerButton">Register</span>
              
</div>




@* 新暫時彈窗 *@
@* @if (displayForm)
{ *@
    <section class="@(displayForm? "" : "d-none") products-popup-bg products-popup-open " id="products-popupblock-Name">
        <div class="products-popupblock">

            <svg class="products-popup-close" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 25 25" width="25" @onclick="EditFormCancel">
                <path id="" data-name="" d="M10,10,0,20,10,10,0,0,10,10,20,0,10,10,20,20Z" transform="translate(2.5 2.5)"
                    fill="none" stroke="#fff" stroke-linecap="round" stroke-linejoin="round" stroke-width="5" />
            </svg>

            <div class="products-popup-title" data-i18n="Home_data:register.title">Register Account</div>

            <EditForm Model="@RegisterDTO" class="window_input_block">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="products-popup-content">
                    <div class="products-popup-scroll">
                        <div class="products-popup-text" style="margin: 10px 0 0px;" data-i18n="Home_data:register.text">Enter the 6-digit verify code sent to <br>
                            @* <span class="popup-RegisterPhone">@CountryCode-@PhoneNum</span> *@
                        </div>
                        <span class="popup-RegisterPhone">@CountryCode-@PhoneNum</span>


                        <div class="popup-low">
                            <div class="popup-label-02">
                                <label class="popup-label" for="name" data-i18n="Home_data:register.verifyCode">VerifyCode</label>
                                <div class="TimeLeft">
                                    <apan class="">@TimeLeft</apan>
                                    <button class="button-hover" disabled=@TimerIsRunning  @onclick="SendVerifyCode" data-i18n="Home_data:register.resend">Resend</button>
                                </div>
                            </div>
                            <input class="products-popup-inputText" id="name" type="text" @bind-value="RegisterDTO.VerifyCode"
                                placeholder="">
                        
                        </div>
                    
                                        <div class="popup-low">
                            <label class="popup-label" for="name" data-i18n="Home_data:register.userName">User Name</label>
                            <input class="products-popup-inputText" id="username" type="text" @bind-value="UserName"
                                placeholder="">
                        </div>

                        <div class="popup-low">
                            <label class="popup-label" for="name" data-i18n="Home_data:register.password">Password</label>
                            <input class="products-popup-inputText" id="password" type="text" @bind-value="RegisterDTO.Password"
                                placeholder="">
                        </div>

                        <div class="popup-low">
                            <label class="popup-label" for="name" data-i18n="Home_data:register.confirmPassword">Confirm Password</label>
                            <input class="products-popup-inputText" id="passwordcheck" type="text" @bind-value="PasswordCheck"
                                placeholder="">
                        </div>


                    
                        <div class="products-popup-error">@ErrorString</div>

                        <button class="products-popup-submit button-hover" type="submit" @onclick="RegisterSubmit" data-i18n="Home_data:register.registerButton">Register</button>
                
                    </div>
                </div>

            </EditForm>

        </div>
    </section>
@* } *@


@* 送出成功/失敗 彈窗 *@
@* @if(displayAlert){ *@
    <section class="@(displayAlert? "" : "d-none") products-popup-bg  products-popup-open " id="products-popupblock-result">
        <div class="products-popupblock">

            <svg class="products-popup-close" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 25 25" width="25" @onclick="AlertCancel">
                <path id="" data-name="" d="M10,10,0,20,10,10,0,0,10,10,20,0,10,10,20,20Z" transform="translate(2.5 2.5)"
                    fill="none" stroke="#fff" stroke-linecap="round" stroke-linejoin="round" stroke-width="5" />
            </svg>

            @* <div class="products-popup-title" data-i18n="Home_data:registerAlert.@AlertDatai18n"> *@
            <div class="products-popup-title">
                @AlertTitle
            </div>

            <EditForm Model="@RegisterDTO" class="window_input_block">
            

                <div class="products-popup-content">

                    @* 這裡待處理 *@
                    <div class="products-popup-text">@AlertContent</div>
                

                    <button class="products-popup-submit button-hover" type="submit" @onclick="AlertCancel" data-i18n="Home_data:register.close">Close</button>
                </div>

            </EditForm>

        </div>
    </section>
@* } *@









@code {
    private IJSObjectReference? NFTindexBannerJS;

    [Parameter]
    public string? CountryCode { get; set; }
    [Parameter]
    public string? PhoneNum { get; set; }


    //註冊彈窗
    bool displayForm = false;
    void EditFormShow() => displayForm = true;
    void EditFormCancel() => displayForm = false;

    //提醒彈窗
    bool displayAlert = false;
    public string? AlertTitle { get; set; }
    public string? AlertDatai18n { get; set; }
    public string? AlertContent { get; set; }
    @* void AlertShow() => displayAlert = true; *@
    void AlertCancel() => displayAlert = false;


    public PhoneMemberRegisterDTO RegisterDTO { get; set; } = new PhoneMemberRegisterDTO();



    public string PasswordCheck { get; set; }
    public string UserName { get; set; }
    public string ErrorString { get; set; }



    //倒數計時
    bool TimerIsRunning = false;
    TimeSpan TimeLeft = new TimeSpan();

    async Task Timer()
    {
        while (TimeLeft > new TimeSpan())
        {
            await Task.Delay(1000);
            TimeLeft = TimeLeft.Subtract(new TimeSpan(0,0,1));
            StateHasChanged();
        }
        TimerIsRunning = false;
        StateHasChanged();
    }


    void AlertShow() 
    {
        displayAlert = true;
        NFTindexBannerJS.InvokeVoidAsync("NFTindexRegister");
        @* await JS.InvokeVoidAsync("installI18n"); *@
    }


    private async Task SendVerifyCode()
    {
        if (String.IsNullOrEmpty(CountryCode) )
        {
            AlertDatai18n = "countryCode";
            AlertTitle = "Please enter your Country Code";
            AlertShow();
            return;
        }
        if (String.IsNullOrEmpty(PhoneNum) )
        {
            AlertDatai18n = "phoneNum";
            AlertTitle = "Please enter your Phone Number";
            AlertShow();
            return;

        }

        ServerResponce resp = await AuthService.PhoneSendVerifyCode(CountryCode, PhoneNum);
        if (resp.Success == true)
        {
            TimerIsRunning = true;
            TimeLeft = new TimeSpan(0,0,20);
            Timer();
            EditFormShow();

        }
        else
        {
            Console.WriteLine(resp.Content);
            AlertTitle = "Sending verification code failed";
            AlertDatai18n = "verifyFailed";
           

            switch (resp.Content)
            {
                case "BadRequest":
                    AlertContent = resp.Content + ". Please check the input is correct. ";
                    AlertDatai18n = "badRequest";
                    break;

                case "Conflict":
                    AlertContent = resp.Content + ". This phone Number has already been registered. ";
                    AlertDatai18n = "conflict";
                    break;

                
                default:
                    AlertContent = resp.Content;
                    break;
            }


            AlertShow();
        }


    }



    private async Task RegisterSubmit()
    {
        if (PasswordCheck != RegisterDTO.Password)
        {
            return;
        }


        ServerResponce resp = await AuthService.PhoneRegister(CountryCode, PhoneNum,RegisterDTO, UserName);
        if (resp.Success == true)
        {
          
            //登出舊儲存帳號
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var LoginUser = authState.User;
            if (LoginUser != null && LoginUser.Identities.Count() != 0)
            {
                await AuthService.AuthLogout();
            }


            //登入
            LoginRequest loginRequest = new LoginRequest();
            if (PhoneNum.Substring(0, 1) != "0")
            {
                PhoneNum = "0"+PhoneNum;
            }
            loginRequest.phone = PhoneNum;
            loginRequest.password = PasswordCheck;
            SnakeAccount snakeAccount = await AuthService.AuthLogin(loginRequest);
            AppState.UpdateLoginStatus(this, snakeAccount);

            AlertTitle = "Register Successed";
            AlertDatai18n = "registerSuccessed";
            AlertContent = "";
            AlertShow();

            EditFormCancel();



        }
        else
        {
            AlertTitle = "Register Failed";
            AlertDatai18n = "registerFailed";
            AlertContent = resp.Content;
            AlertShow();
        }

    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        
        if (firstRender)
        {
            @* await JS.InvokeVoidAsync("Popup"); *@
            await JS.InvokeVoidAsync("TippyInit");

            AppState.StateChanged += async (Source, Property)
            => await InvokeAsync(StateHasChanged);
        }
    }
    void IDisposable.Dispose()
    {
        //AppState.OnChange -= StateHasChanged;
        AppState.StateChanged -= async (Source, Property)
            => await InvokeAsync(StateHasChanged);
    }
}
