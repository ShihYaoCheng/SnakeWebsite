@page "/autologin/{encrypt?}"
@inject IJSRuntime JS
@using SnakeAsianLeague.Data.Entity.View
@using SnakeAsianLeague.Data.Services
@using SnakeAsianLeague.Data.Entity

@implements IDisposable
@inject NavigationManager NavigationManager
@inject AppState AppState
@inject IAuthService authService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject GetUrlView GetUrlView
<div style="display:flex;width:100vw;height:100vh;justify-content:center;align-items:center;">  
    <button @onclick="OpenMeataMask" style="text-align: center;border: 3.8px solid #eac492db;background-image: linear-gradient(to top, #ffa300, #fed322);color: #fff;margin: 10px;letter-spacing: 1px;padding: 10px 20px 9px;border-radius: 17px;font-weight: 600;cursor: pointer;box-shadow: 3px 3px 10px 5px rgb(154 144 139 / 30%);display: inline-block;text-decoration: none;letter-spacing: 1.5px;font-size: 18px;font-family: sans-serif;transition: all .01s ease-in;text-shadow: 1px 2px 2px rgb(77 36 9 / 25%);">請開啟MetaMask瀏覽器</button>
</div>


@code {

    [Parameter]
    public string? encrypt { get; set; }
    string url="";
    private IJSObjectReference? IsMobileJS;
    bool isInMetaMask = false;
    protected override async Task OnInitializedAsync()
    {
        url =await GetUrlView.GetUrl();

        //if (url.Length < 23)
        //{          
        //    
        //}
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsMobileJS = await JS.InvokeAsync<IJSObjectReference>("import", "./JavaScript/SharedLib/IsMobile.js");
            isInMetaMask = await IsMobileJS.InvokeAsync<bool>("IsInMetaMask");

            if (isInMetaMask)
            {
                NavigationManager.LocationChanged += HandleLocationChanged;
                AppState.StateChanged += async (Source, Property)
                    => await InvokeAsync(StateHasChanged);


                //登出舊儲存帳號
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var LoginUser = authState.User;
                if (LoginUser != null && LoginUser.Identities.Count() != 0)
                {
                    await authService.AuthLogout();
                }

                //解碼
                Console.WriteLine(encrypt);
                //encrypt = "eyJwaG9uZSI6ICIwOTcyNzk1MzYzIiwicGFzc3dvcmQiOiAiMTIzNDU2In0=";
                //encrypt = "eyJQaG9uZSI6Ijg4Njk4OTI0MjcyMyIsIlBhc3N3b3JkIjoiYWFhMTIzNDU2In0=";

                LoginRequest loginRequest = new LoginRequest();
                loginRequest = authService.DecodeLoginRequest(encrypt);
                if (loginRequest != null && loginRequest.Phone != null)
                {
                    try
                    {
                        SnakeAccount snakeAccount = await authService.AuthLogin(loginRequest, true);
                        AppState.UpdateLoginStatus(this, snakeAccount);
                        NavigationManager.NavigateTo("/GettingStarted/create-metamask", true);
                    }
                    catch (Exception ex)
                    {
                        NavigationManager.NavigateTo("/GettingStarted/create-PonPonSnake-game", true);
                    }
                }
                else
                {
                    NavigationManager.NavigateTo("/GettingStarted/create-PonPonSnake-game", true);
                }
            }     
        }

    }

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        Console.WriteLine("URL of new location: {Location}", e.Location);
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
        AppState.StateChanged -= async (Source, Property)
            => await InvokeAsync(StateHasChanged);
    }
    public void OpenMeataMask()
    {
         NavigationManager.NavigateTo("https://metamask.app.link/dapp/" + url +"/autologin/"+encrypt);
    }

}
