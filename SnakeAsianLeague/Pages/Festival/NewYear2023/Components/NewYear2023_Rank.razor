@using SnakeAsianLeague.Data.Entity.SnakeServer
@using SnakeAsianLeague.Data.Services
@using SnakeAsianLeague.Data.Services.SnakeServerService
@using System.Text.Json;
@using Newtonsoft.Json;

@inject AsiaLeagueScheduleService AsiaLeagueScheduleService
@inject AsiaLeaguePlaceService AsiaLeaguePlaceService
<head>
    <link href="css/Festival/NewYear2023/NewYear2023_Rank.css" rel="stylesheet" />  
</head>

<div class="NewYear2023_Rank_container" id="NewYear2023_Ranking">
    <div class="NewYear2023-container">
        <div class="NewYear2023_Rank_BG" > 
            @*排名顯示底板*@
            <div class="Bottom_Plate" style="background:round url(@("/images/Festival/NewYear2023/rank/Bottom_Plate"+RankType+".png"));">
                
                <div class="NewYear2023-title" id="NewYear2023-title-Ranking">
                    <span data-i18n="NewYear2023_data:ranking.title">- 時程 -</span>
                </div>

                <div class="toggleRankTypeButton-container" style="background:round url(@("/images/Festival/NewYear2023/rank/toggleRankTypeButton"+RankType+".png"));">
                    <button data-i18n="NewYear2023_data:ranking.solo" class="rank_type_button_solo"  @onclick=@(()=>toggleRankType(1)) style="width:@(RankType==1?"58%":"42%")"> Solo </button>
                    <button data-i18n="NewYear2023_data:ranking.squad" class="rank_type_button_squad" @onclick=@(()=>toggleRankType(2)) style="width:@(RankType==1?"42%":"58%")"> Squad </button>
                </div>            
            </div>

            @*下拉選擇排名日期*@
            <div class="select_bg">
                <div class="select-container">
                    <select @onchange="@(async (e)=>{await changeSelect( int.Parse(e.Value.ToString()) );})">
                        @if (nowOptionData != null )
                        {                           
                           @foreach(var item in nowOptionData){
                                <option value="@item.station">@item.innerHTML </option>
                           } 
                        }
                    </select>
                </div>
            </div>
            @*顯示排名*@
            <div class="rank-content">
                <div class="rank-date">
                    @* <p >Qualification Date：5/29~5/28</p> *@
                    <div class="top3-container">
                        @if (rankList != null )
                        {
                            @foreach(var item in rankList)
                            {
                                <div class="rank@(item.Place)"> 
                                    <span>
                                        @item.WinnerName 
                                    </span>
                                </div>
                            }

                            @if (rankList?.Count == 0)
                            {
                                <div class="Ranking-ComingSoon">
                                    <span data-i18n="WarmUpActivities_data:ranking.ComingSoon">Coming Soon</span>
                                </div>
                            }
                        }
                        else
                        {
                            
                            <div class="Ranking-ComingSoon">
                                <span data-i18n="WarmUpActivities_data:ranking.ComingSoon">Coming Soon</span>
                            </div>
                        }

                      
                        @*<div class="rank2"></div>
                     
                        <div class="rank3"></div>*@
                    </div>
                </div>
                
            </div>

        </div>

    </div>

</div>

@code {
    enum RankTypeEnum
    {
        Solo=1,
        Squad=2
    }
    int RankType =1;
    private async void toggleRankType( int value)
    {
        RankType = value;
        nowOptionData = value == 1 ? soloOptionData : squadOptionData;
        await changeSelect(1);
    }

    List<AsiaLeagueSchedule> Schedules;
    protected override async Task OnInitializedAsync()
    {
        Schedules = await AsiaLeagueScheduleService.GetAsiaLeagueSchedulesAsync(AsiaLeagueSeasons.NewYear2023);
        await optionDateList();
        await changeSelect(1);
    }

    private async Task optionDateList()
    {       
        List<AsiaLeagueSchedule> soloEndDay = Schedules.Where(w => w.IndFinalType == 0).ToList();
        List<AsiaLeagueSchedule> squadEndDay = Schedules.Where(w => w.GuildFinalType == 1).ToList();

        foreach(var item in soloEndDay)
        {
            OptionDTO soloOption = new OptionDTO();
            soloOption.innerHTML = "Solo #" + item.IndStation.ToString() + " " + item.Date.ToString("yyyy/MM/dd");
            soloOption.station = item.IndStation.ToString();
            soloOptionData.Add(soloOption);
        }

        foreach(var item in squadEndDay)
        {
            OptionDTO squadOption = new OptionDTO();
            squadOption.innerHTML = "Squad #" + item.GuildStation.ToString() + " " + item.Date.ToString("yyyy/MM/dd");
            squadOption.station = item.GuildStation.ToString();
            squadOptionData.Add(squadOption);
        }
        nowOptionData = soloOptionData;

    }
    List<OptionDTO> soloOptionData  = new List<OptionDTO>();
    List<OptionDTO> squadOptionData  = new List<OptionDTO>();
    List<OptionDTO> nowOptionData;
    List<AsiaLeaguePlace> rankList;
    public class OptionDTO
    {
        public string innerHTML = "";
        public string station = "";
    }

    public async Task changeSelect( int value)
    {
        bool RankOptionIsGuild = RankType == 2 ?true: false ;      
        rankList  = await AsiaLeaguePlaceService.GetAsiaLeaguePlacesByIsGuildAndStation(AsiaLeagueSeasons.NewYear2023 ,RankOptionIsGuild , value );
        InvokeAsync(StateHasChanged);
    }
}
