@using SnakeAsianLeague.Data.Entity.Config
@using SnakeAsianLeague.Data.Entity.SnakeServer
@using SnakeAsianLeague.Data.Services
@using SnakeAsianLeague.Data.Services.SnakeServerService
@using SnakeAsianLeague.Data.Entity.View


@inject AsiaLeaguePlaceService AsiaLeaguePlaceService
@inject AsiaLeagueScheduleService AsiaLeagueScheduleService
@inject GuildMemberService GuildMemberService

@inject AppState AppState
@implements IDisposable

@if(squadOptionDate != null && soloOptionDate != null)
{
    <div id="Ranking" class="Ranking" style="background:@BGcolor">     
        @*Banner*@

        @if (bannerToggle )
        {
            @*Squad*@
            <div class="Ranking-banner squadBanner">
                <div class="Ranking-banner-bg">
                     <p> - <span  data-i18n="Asian_data:main.Ranking">Ranking</span> - </p>
                     <img data-i18n="[src]Asian_data:Ranking.toggleBtnSquad"  src="/images/AsiaChampionsLeague/S3/Ranking/Squad/Ranking_Squad select-3.webp"  >
                     <button @onclick="()=>changeBanner(false)"></button>                
                </div> 
                      <div class="Ranking-banner-selectContainer">     
                    
                            <div class="Ranking-banner-select"> 
                        
                                <img class ="Bar"  src="./images/AsiaChampionsLeague/S3/Ranking/Squad/Ranking_Squad select BAR-1.webp" />    
                                

                                <EditForm Model="model">
                                    <InputSelect ValueExpression="@(()=>model.SelectOptionSchedule)"  Value="@model.SelectOptionSchedule"
                                        ValueChanged="@((AsiaLeagueSchedule value) => SelectOptionChange(value ))" class="my_match_select">
                                    
                                            @foreach (var s in squadOptionDate)
                                            {
                                                <option class="my_match_option" value="@s">@GetRankOptionByType(s.GuildFinalType, s.GuildSchedule , s.Date.ToString("yyyy/MM/dd"))</option>
                                            }
                                    </InputSelect>

                                </EditForm>
                            
                            </div>
                    </div>
            </div>
        }
        else
        {
            @*solo*@
            <div class="Ranking-banner soloBanner">
                <div class="Ranking-banner-bg">     
                    <p> - <span  data-i18n="Asian_data:main.Ranking">Ranking</span> - </p>
                     <img data-i18n="[src]Asian_data:Ranking.toggleBtnSolo" src= "/images/AsiaChampionsLeague/S3/Ranking/SOLO/Ranking_Soloselect-3.webp"  >
                     <button @onclick="()=>changeBanner(true)"></button>
                </div> 
                   <div class="Ranking-banner-selectContainer">  
               
                        <div class="Ranking-banner-select"> 
                       
                            <img class ="Bar"  src="./images/AsiaChampionsLeague/S3/Ranking/SOLO/Ranking_Solo Select Bar-1.webp" />   
                            

                            <EditForm Model="model">
                                <InputSelect ValueExpression="@(()=>model.SelectOptionSchedule)"  Value="@model.SelectOptionSchedule"
                                    ValueChanged="@((AsiaLeagueSchedule value) => SelectOptionChange(value ))" class="my_match_select">
                                    
                                        @foreach (var s in soloOptionDate)
                                        {
                                            <option class="my_match_option" value="@s">@GetRankOptionByType(s.IndFinalType, s.IndividualSchedule , s.Date.ToString("yyyy/MM/dd"))</option>
                                        }
                                </InputSelect>

                            </EditForm>

                        </div>
                     </div>
            </div>
        }    
        @*Date*@
    

                
        @*Place*@
        <div class="Ranking-Place">
            <div class="Ranking-Place-left">
                <div class="Ranking-Date" >
                    <p>Qualification Date : 5/29 ~ 5/28</p>
                </div>
                @*第一名*@
                <div class="Ranking_First">
                    <img class="shineCrown" src="/images/AsiaChampionsLeague/S3/Ranking/Place/pngegg.webp"/>
                    <img  src="/images/AsiaChampionsLeague/S3/Ranking/Place/皇冠1.webp"/>
                    @if (RankingView)
                    {
                        <h3>
                                @topThree[0]
                        </h3>
                    }
                  @*<p>
                        @topThree[0][1]
                    </p>*@ 
                </div>
                @*第二名*@
                <div class="Ranking_Second">
                    <img  src="/images/AsiaChampionsLeague/S3/Ranking/Place/皇冠2.webp"/>
                    @if (RankingView)
                    {
                        <h3>
                            @topThree[1]
                        </h3>
                    }
                  @*<p>
                        @topThree[1][1]
                    </p>*@ 
                </div>
                @*第三名*@
                <div class="Ranking_third">
                    <img  src="/images/AsiaChampionsLeague/S3/Ranking/Place/皇冠3.webp"/>
                     @if (RankingView)
                    {               
                        <h3>
                            @topThree[2]
                        </h3>
                    }
                  @*<p>
                        @topThree[2][1]
                    </p>*@ 
                </div>
            </div>
            <div class="Ranking-Place-right">
                <div class="Ranking-Place-Other">
                    @if (RankingView) { 
               
                    @foreach(var name in otherRanking)
                    {
                        <div class="Place-Other-container">                  
                            <h3>
                                @name
                            </h3>
                            @*<p>
                                @name[1]
                            </p>*@
                        </div>
                    }          
                    }
                </div>
            </div>
        </div>
    </div>

}


@code {
    [Parameter]
    public EventCallback reload { get; set; }

    public enum RankType
    {
        Silver,
        Diamond,
        Master,
        Charity
    }
    public enum RankTypeChinese
    {
        白銀,
        鑽石,
        大師,
        公益
    }


    RankView RankView;
    Boolean RankOptionIsGuild;
    int RankOptionStation;

     /*BannerOption*/
    List<AsiaLeagueSchedule> squadOptionDate;
    List<AsiaLeagueSchedule> soloOptionDate;

    Model model = new Model();
    class Model
    {
        public AsiaLeagueSchedule SelectOptionSchedule { get; set; } = new AsiaLeagueSchedule();
        //public List<AsiaLeagueSchedule> squadOptionDate { get; set; }  = new List<AsiaLeagueSchedule>();
    }


    void IDisposable.Dispose()
    {
        //  AppState.langChanged -= async (value)
        //=>  await clickReload();

        AppState.StateChanged -= async (Source, Property)
            => await InvokeAsync(StateHasChanged);
    }

    private async Task AppState_StateChanged(ComponentBase Source, string Property)
    {
        if (Source != this)
        {
            await InvokeAsync(StateHasChanged);
        }

    }

    protected override async Task OnInitializedAsync()
    {
        //AppState.langChanged += async (value)
        //=>  await clickReload();

        AppState.StateChanged += async (Source, Property)
            => await InvokeAsync(StateHasChanged);

        RankOptionIsGuild = true;
        RankOptionStation = 1;

        await AsiaLeagueScheduleService.GetAsiaLeagueSchedulesAsync(AsiaLeagueSeasons.AsiaLeagueS3);
        await LoadOptions();
        
        await LoadRanks();


    }

    private async Task SelectOptionChange(AsiaLeagueSchedule value)
    {
        RankOptionStation = RankOptionIsGuild ? value.GuildStation : value.IndStation;
        await LoadRanks();

    }






    public Boolean bannerToggle = true;
    public Boolean RankingView = false;
    public string BGcolor = "#d9d3f9";
    public void changeBanner(Boolean value)
    {
        if (value)
        {
            BGcolor = "#d9d3f9";
        }
        else
        {
            BGcolor = "#d4e2f8";
        }
        bannerToggle = value;
        RankOptionIsGuild = value;
        RankOptionStation = 1;
        LoadRanks();
    }

 


    /*排名name*/
    public string[] otherRanking = new string[5]
    {
       "","", "","",""
    };
    public string[] topThree= new string[3]
    {
       "","", ""
    };



    public string GetRankOptionByType(int type , string ScheduleName,  string date )
    {
        string optionString = date + " ";

        if (AppState.NowLanguage == Multilingual.en)
        {
            switch (type)
            {
                case 0:
                case 1:
                    optionString += RankType.Silver + " "   ;
                    break;
                case 2:
                    optionString += RankType.Diamond + " "  ;
                    break;
                case 3:
                    optionString += RankType.Master + " "  ;
                    break;
                case 4:
                    optionString += RankType.Charity + " "  ;
                    break;
                default:
                    break;

            }
        }
        else
        {
            switch (type)
            {
                case 0:
                case 1:
                    optionString += RankTypeChinese.白銀 + " "   ;
                    break;
                case 2:
                    optionString += RankTypeChinese.鑽石 + " "  ;
                    break;
                case 3:
                    optionString += RankTypeChinese.大師 + " "  ;
                    break;
                case 4:
                    optionString += RankTypeChinese.公益 + " "  ;
                    break;
                default:
                    break;

            }
        }


        if (! String.IsNullOrEmpty(ScheduleName))
        {
            int i = ScheduleName.IndexOf("#");
            optionString += ScheduleName.Substring(i);
        }


        return optionString;
    }

    protected async Task LoadOptions()
    {
        squadOptionDate =AsiaLeagueScheduleService.GetSchedulesByIsGuild(true);
        soloOptionDate =AsiaLeagueScheduleService.GetSchedulesByIsGuild(false);

        //squadOption.Clear();
        //soloOption.Clear();

        //squadOptionDate =AsiaLeagueScheduleService.GetSchedulesByIsGuild(true);
        //foreach (var s in  squadOptionDate)
        //{
        //    string optionStr = GetRankOptionByType(s.GuildFinalType, s.GuildSchedule , s.Date.ToString("yyyy/MM/dd") );
        //    squadOption.Add( optionStr);

        //}


        //soloOptionDate =AsiaLeagueScheduleService.GetSchedulesByIsGuild(false);
        //foreach (var s in soloOptionDate)
        //{
        //    string optionStr = GetRankOptionByType(s.IndFinalType, s.IndividualSchedule , s.Date.ToString("yyyy/MM/dd") );
        //    soloOption.Add( optionStr);

        //}
        //Console.WriteLine();
    }

    protected async Task LoadRanks()
    {
        RankView = new RankView();
        RankView.IsGuild = RankOptionIsGuild;
        RankView.Station = RankOptionStation;

        AsiaLeagueSchedule schedule = AsiaLeagueScheduleService.GetOneScheduleByIsGuildAndStation(RankOptionIsGuild,RankOptionStation);

        if (schedule != null)
        {
            RankView.Title = RankOptionIsGuild ? schedule.GuildSchedule : schedule.IndividualSchedule;
            RankView.MatchDate = schedule.Date;
        }



        List<AsiaLeaguePlace> Places = await AsiaLeaguePlaceService.GetAsiaLeaguePlacesByIsGuildAndStation(AsiaLeagueSeasons.AsiaLeagueS3,RankOptionIsGuild,RankOptionStation);
        List<AsiaLeaguePlaceView> PlacesViews = new List<AsiaLeaguePlaceView>();

        foreach (AsiaLeaguePlace p in Places)
        {
            if (RankOptionIsGuild)
            {
                List<GuildMember> members = await GuildMemberService.GetGuildMembersByGuildId(p.WinnerId);
                PlacesViews.Add(new AsiaLeaguePlaceView(p, members));
            }
            else
            {
                PlacesViews.Add(new AsiaLeaguePlaceView(p, null));
            }
        }
        RankView.Places = PlacesViews;
        if (RankView.Places.Count == 0)
        {
            RankingView = false;
        }
        else
        {
            RankingView = true;
            for (var i = 0; i < RankView.Places.Count; i++)
            {
                if (i < 3)
                {
                    if (!String.IsNullOrEmpty(RankView.Places[i].Place.WinnerName))
                        topThree[i] = RankView.Places[i].Place.WinnerName;
                    else
                        topThree[i] = "";
                }
                else
                {
                    if (!String.IsNullOrEmpty(RankView.Places[i].Place.WinnerName))
                        otherRanking[i-3] = RankView.Places[i].Place.WinnerName;
                    else
                        otherRanking[i-3] = "";

                }
            }
        }

        RankView.QualifyingDates = AsiaLeagueScheduleService.GetQualifyingDates(RankOptionIsGuild, RankOptionStation);

        await InvokeAsync(StateHasChanged);
    }





}
