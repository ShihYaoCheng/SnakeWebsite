@using SnakeAsianLeague.Data.Entity.SnakeServer
@using SnakeAsianLeague.Data.Services.SnakeServerService
@using SnakeAsianLeague.Data.Entity.View

@inject AsiaLeaguePlaceService AsiaLeaguePlaceService
@inject AsiaLeagueScheduleService AsiaLeagueScheduleService
@inject GuildMemberService GuildMemberService

<div id="Ranking" class="Ranking">     
    @*Banner*@

    @if (bannerToggle)
    {
        @*Squad*@
        <div class="Ranking-banner squadBanner">
            <div class="Ranking-banner-bg">
                 <img data-src="/images/AsiaChampionsLeague/S3/Ranking/Squad/Ranking_Squad select-3.webp" src="/images/AsiaChampionsLeague/S3/Ranking/Squad/Ranking_Squad select-3.webp">
                 <button @onclick="()=>changeBanner(false)"></button>                
            </div> 
                  <div class="Ranking-banner-selectContainer">     
                    
                    <div class="Ranking-banner-select"> 
                        
                        <img class ="Bar" data-src="./images/AsiaChampionsLeague/S3/Ranking/Squad/Ranking_Squad select BAR-1.webp" src="./images/AsiaChampionsLeague/S3/Ranking/Squad/Ranking_Squad select BAR-1.webp" />    
                        <select @onchange = "(e)=>selectChange(e)" >
                             @{int i = 0;}
                        @foreach(var date in squadOption )
                        {
                               i++;
                                <option value= "@i">@date</option>
                             
                        }         
                        </select>
                    </div>
                </div>
        </div>
    }
    else
    {
        @*solo*@
        <div class="Ranking-banner soloBanner">
            <div class="Ranking-banner-bg">              
                 <img data-src="/images/AsiaChampionsLeague/S3/Ranking/SOLO/Ranking_Soloselect-3.webp" src="/images/AsiaChampionsLeague/S3/Ranking/SOLO/Ranking_Soloselect-3.webp">
                 <button @onclick="()=>changeBanner(true)"></button>
            </div> 
               <div class="Ranking-banner-selectContainer">  
               
                    <div class="Ranking-banner-select"> 
                       
                        <img class ="Bar" data-src="./images/AsiaChampionsLeague/S3/Ranking/SOLO/Ranking_Solo Select Bar-1.webp" src="./images/AsiaChampionsLeague/S3/Ranking/SOLO/Ranking_Solo Select Bar-1.webp" />    
                        <select >
                        @{int i = 0;}
                        @foreach(var date in soloOption)
                        {
                             <option value="@i" >@date</option>
                             i++;
                        }                       
                        </select>
                    </div>
                 </div>
        </div>
    }    
    @*Date*@
    

                
    @*Place*@
    <div class="Ranking-Place">
        <div class="Ranking-Place-left">
            <div class="Ranking-Date" >
                <p>Qualification Date : 5/29 ~ 5/28</p>
            </div>
            @*第一名*@
            <div class="Ranking_First">
                <img class="shineCrown" data-src="/images/AsiaChampionsLeague/S3/Ranking/Place/pngegg.webp"/>
                <img  data-src="/images/AsiaChampionsLeague/S3/Ranking/Place/皇冠1.webp"/>
                <h3>
                    @topThree[0]
                </h3>
              @*<p>
                    @topThree[0][1]
                </p>*@ 
            </div>
            @*第二名*@
            <div class="Ranking_Second">
                <img  data-src="/images/AsiaChampionsLeague/S3/Ranking/Place/皇冠2.webp"/>
                <h3>
                    @topThree[1]
                </h3>
              @*<p>
                    @topThree[1][1]
                </p>*@ 
            </div>
            @*第三名*@
            <div class="Ranking_third">
                <img  data-src="/images/AsiaChampionsLeague/S3/Ranking/Place/皇冠3.webp"/>
                <h3>
                    @topThree[2]
                </h3>
              @*<p>
                    @topThree[2][1]
                </p>*@ 
            </div>
        </div>
        <div class="Ranking-Place-right">
            <div class="Ranking-Place-Other">
                @foreach(var name in otherRanking)
                {
                    <div class="Place-Other-container">                  
                        <h3>
                            @name
                        </h3>
                        @*<p>
                            @name[1]
                        </p>*@
                    </div>
                }          
            </div>
        </div>
    </div>
</div>
@code {

    public Boolean bannerToggle = true;

    public void changeBanner(Boolean value)
    {
        bannerToggle = value;
        RankOptionIsGuild = value;

    }

    public void selectChange(ChangeEventArgs e)
    {
        Console.WriteLine();

        RankOptionStation = int.Parse( e.Value.ToString());
        LoadRanks();
    }

    /*BannerOption*/
    public List<string> squadOption = new List<string>();

    public List<string> soloOption = new List<string>();  


    /*排名name*/
    public string[] otherRanking = new string[5]
    {
       "第四名ID","第五名ID", "第六名ID","第六名ID","第六名ID"
    };
    public string[] topThree= new string[3]
    {
       "第一名ID","第二名ID","第三名ID"
    };




    RankView RankView;
    Boolean RankOptionIsGuild;
    int RankOptionStation;

    List<AsiaLeagueSchedule> Schedules;
    List<AsiaLeagueSchedule> squadOptionDate;
    List<AsiaLeagueSchedule> soloOptionDate;

    protected override void OnInitialized()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {   
        if (firstRender){
            RankOptionIsGuild = false;
            RankOptionStation = 1;

            Schedules = await AsiaLeagueScheduleService.GetAsiaLeagueSchedulesAsync(AsiaLeagueSeasons.AsiaLeagueS3);

            LoadOptions();
            await LoadRanks();
            await InvokeAsync(StateHasChanged);
        }        
    }

    public enum RankType
    {
        Silver,
        Diamond,
        Master,
        Charity
    }

    public string GetRankOptionByType(int type , string name,  string date)
    {
        string optionString = "";

        int i = name.IndexOf("#");
        string subName = name.Substring(i);

        switch (type)
        {
            case 0:
            case 1:
                optionString = RankType.Silver + " " +  subName + " " + date;
                break;
            case 2:
                optionString = RankType.Diamond + " " +  subName + " " + date;
                break;
            case 3:
                optionString = RankType.Master + " " +  subName + " " + date;
                break;
            case 4:
                optionString = RankType.Charity + " " +  subName + " " + date;
                break;
            default:
                break;
        }
        return optionString;
    }

    protected void LoadOptions()
    {
        squadOptionDate =AsiaLeagueScheduleService.GetSchedulesByIsGuild(true);


        foreach (var s in squadOptionDate)
        {
            string optionStr = GetRankOptionByType(s.GuildFinalType, s.GuildSchedule , s.Date.ToString("yyyy/MM/dd"));
            squadOption.Add( optionStr);

        }


        soloOptionDate =AsiaLeagueScheduleService.GetSchedulesByIsGuild(false);
        foreach (var s in soloOptionDate)
        {
            string optionStr = GetRankOptionByType(s.IndFinalType, s.IndividualSchedule , s.Date.ToString("yyyy/MM/dd"));
            soloOption.Add( optionStr);

        }
    }

    protected async Task LoadRanks()
    {
        RankView = new RankView();
        RankView.IsGuild = RankOptionIsGuild;
        RankView.Station = RankOptionStation;

        AsiaLeagueSchedule schedule = AsiaLeagueScheduleService.GetOneScheduleByIsGuildAndStation(RankOptionIsGuild,RankOptionStation);
     
        if (schedule != null)
        {
            RankView.Title = RankOptionIsGuild ? schedule.GuildSchedule : schedule.IndividualSchedule;
            RankView.MatchDate = schedule.Date;
        }

      

        List<AsiaLeaguePlace> Places = await AsiaLeaguePlaceService.GetAsiaLeaguePlacesByIsGuildAndStation(AsiaLeagueSeasons.AsiaLeagueS3,RankOptionIsGuild,RankOptionStation);
        List<AsiaLeaguePlaceView> PlacesViews = new List<AsiaLeaguePlaceView>();

        foreach (AsiaLeaguePlace p in Places)
        {
            if (RankOptionIsGuild)
            {
                List<GuildMember> members = await GuildMemberService.GetGuildMembersByGuildId(p.WinnerId);
                PlacesViews.Add(new AsiaLeaguePlaceView(p, members));
            }
            else
            {
                PlacesViews.Add(new AsiaLeaguePlaceView(p, null));
            }
        }
        RankView.Places = PlacesViews;
        
        RankView.QualifyingDates = AsiaLeagueScheduleService.GetQualifyingDates(RankOptionIsGuild, RankOptionStation);


    }


}
