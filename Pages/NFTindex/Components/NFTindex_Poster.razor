@page "/Poster"
@using SnakeAsianLeague.Data.Services
@using SnakeAsianLeague.Data.Entity.SnakeServer
@using SnakeAsianLeague.Data.Entity

@inject IAuthService AuthService
@inject IJSRuntime JS
@inject AppState AppState
@implements IDisposable
@inject AuthenticationStateProvider AuthenticationStateProvider

<head>
    <link href="/css/NFTindex/NFTindex_Poster.css" rel="stylesheet" />
    @* <link href="css/Popup.css" rel="stylesheet" /> *@


</head>

<div class="NFTindex_Poster">
    @* <img src="/images/NFTindex/NFTindex_Poster/Botton_UI.png" alt=""> *@
</div>

@* 註冊按鈕 *@
<div class="login_form" hidden="@false">
    <input type="text" class="login_input" id="address" name="address" placeholder="國碼" @bind=@CountryCode>

    <input type="text" class="login_input" id="address" name="address" placeholder="手機" @bind=@PhoneNum>

    <div id="login_submit" @onclick="@RegisterOnclick">
        <img data-src="/images/Index/signUpEvent_button.webp" src="/images/Index/signUpEvent_button.webp" alt="">
        <span data-i18n="[html]signInWindows.Rigister">Register</span>
    </div>

</div>


@* 新暫時彈窗 *@
<section class="products-popup-bg @(displayForm ? "products-popup-open" : "") " id="products-popupblock-Name">
    <div class="products-popupblock">

        <svg class="products-popup-close" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 25 25" width="25" @onclick="EditFormCancel">
            <path id="" data-name="" d="M10,10,0,20,10,10,0,0,10,10,20,0,10,10,20,20Z" transform="translate(2.5 2.5)"
                fill="none" stroke="#67ada2" stroke-linecap="round" stroke-linejoin="round" stroke-width="5" />
        </svg>

        <div class="products-popup-title">Register Account</div>

        <EditForm Model="@RegisterDTO" class="window_input_block">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="products-popup-content">
                <div class="products-popup-text">Please check the verification code with your mobile phone.</div>

                <div class="popup-low">
                    <label class="popup-label" for="phone">Phone Number</label>
                    <label class="popup-label" for="phone">@PhoneNum</label>
                    
                </div>

                <div class="popup-low">
                    <label class="popup-label" for="name">VerifyCode</label>
                    <input class="products-popup-inputText" id="name" type="text" @bind-value="RegisterDTO.VerifyCode"
                        placeholder="">
                </div>

                <div class="popup-low">
                    <label class="popup-label" for="name">Password</label>
                    <input class="products-popup-inputText" id="password" type="text" @bind-value="RegisterDTO.Password"
                        placeholder="">
                </div>

                <div class="popup-low">
                    <label class="popup-label" for="name">Confirm Password</label>
                    <input class="products-popup-inputText" id="passwordcheck" type="text" @bind-value="PasswordCheck"
                        placeholder="">
                </div>

                <div class="popup-low">
                    <label class="popup-label" for="name">User Name</label>
                    <input class="products-popup-inputText" id="username" type="text" @bind-value="UserName"
                        placeholder="">
                </div>
                
                <div class="products-popup-error">@ErrorString</div>

                <button class="products-popup-submit" type="submit" @onclick="RegisterSubmit">Register</button>
            </div>

        </EditForm>

    </div>
</section>

@* 送出成功/失敗 彈窗 *@
<section class="products-popup-bg" id="products-popupblock-result">
    <div class="products-popupblock">

        <svg class="products-popup-close" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 25 25" width="25" @onclick="EditFormCancel">
            <path id="" data-name="" d="M10,10,0,20,10,10,0,0,10,10,20,0,10,10,20,20Z" transform="translate(2.5 2.5)"
                fill="none" stroke="#67ada2" stroke-linecap="round" stroke-linejoin="round" stroke-width="5" />
        </svg>

        <div class="products-popup-title">送出成功/失敗</div>

        <EditForm Model="@RegisterDTO" class="window_input_block">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="products-popup-content">
                <div class="products-popup-text">敘述</div>


                
                <div class="products-popup-error">@ErrorString</div>

                <button class="products-popup-submit" type="submit" @onclick="RegisterSubmit">close</button>
            </div>

        </EditForm>

    </div>
</section>






@code {


    bool displayForm = false;
    void EditFormShow() => displayForm = true;
    void EditFormCancel() => displayForm = false;


    public PhoneMemberRegisterDTO RegisterDTO { get; set; } = new PhoneMemberRegisterDTO();

    public string CountryCode { get; set; }
    public string PhoneNum { get; set; }
    public string PasswordCheck { get; set; }
    public string ErrorString { get; set; }
    public string UserName { get; set; }


    private async Task RegisterOnclick()
    {
        ServerResponce resp = await AuthService.PhoneSendVerifyCode(CountryCode, PhoneNum);
        if (resp.Success == true)
        {
            EditFormShow();
        }
        else
        {
            Console.WriteLine(resp.Content);
        }

    }







    private async Task RegisterSubmit()
    {
        if (PasswordCheck != RegisterDTO.Password)
        {
            return;
        }


        ServerResponce resp = await AuthService.PhoneRegister(CountryCode, PhoneNum,RegisterDTO, UserName);
        if (resp.Success == true)
        {
          
            //登出舊儲存帳號
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var LoginUser = authState.User;
            if (LoginUser != null && LoginUser.Identities.Count() != 0)
            {
                await AuthService.AuthLogout();
            }


            //登入
            LoginRequest loginRequest = new LoginRequest();
            loginRequest.phone = PhoneNum;
            loginRequest.password = PasswordCheck;
            SnakeAccount snakeAccount = await AuthService.AuthLogin(loginRequest);
            AppState.UpdateLoginStatus(this, snakeAccount);

            EditFormCancel();

        }
        else
        {
            Console.WriteLine(resp.Content);
        }

    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            @* await JS.InvokeVoidAsync("Popup"); *@

            AppState.StateChanged += async (Source, Property)
            => await InvokeAsync(StateHasChanged);
        }
    }
    void IDisposable.Dispose()
    {
        //AppState.OnChange -= StateHasChanged;
        AppState.StateChanged -= async (Source, Property)
            => await InvokeAsync(StateHasChanged);
    }
}
