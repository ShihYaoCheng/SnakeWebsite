@page "/myprofile/inventory"
@using SnakeAsianLeague.Data.Entity
@using SnakeAsianLeague.Data.Paging
@using SnakeAsianLeague.Data.Services
@using SnakeAsianLeague.Data.Services.Personal
@using Microsoft.AspNetCore.Components.Authorization

@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject InventoryService InventoryService
@inject AppState AppState

@implements IDisposable


<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link href="css/NFTFilter.css" rel="stylesheet" />
    <link href="css/MarketPlace.css" rel="stylesheet" />
    <link href="css/Sidebar.css" rel="stylesheet" />
    <link href="css/Pagination.css" rel="stylesheet" />
    <link href="css/Inventory.css" rel="stylesheet" />   
    <link href="css/Popup.css" rel="stylesheet" />

    <link href="//maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
    <title>PonPonSnake 碰碰蛇｜Inventory</title>
</head>

<AuthorizeView>
    <Authorized>
        <div class="inventory-Background"></div>
        <MyprofileSidebar />

        <div class="Inventory-Block">
            <div class="Inventory">
                <div class="Inventory-Title" data-i18n="Sidebar.Inventory">Inventory</div>

                <div class="Secend-Block">
                    <div class="Secend-Title">My Currency</div>
                    <div class="Secend-Inner" id="Secend-Block-MyCerrency">

                        <div class="MyCerrency">
                            <img class="MyCerrency-Icon" src="/images/Myprofile/ERNC.webp" alt="">
                            <div class="MyCerrency-Detail">
                                <p class="MyCerrency-Name">ERNC</p>
                                @*<p class="MyCerrency-Amount">123,456</p>*@
                                <p class="MyCerrency-Amount">0</p>
                            </div>
                        </div>
                         <div class="MyCerrency">
                            <img class="MyCerrency-Icon" src="/images/Myprofile/MIPR.webp" alt="">
                            <div class="MyCerrency-Detail">
                                <p class="MyCerrency-Name">MIPR</p>
                                @*<p class="MyCerrency-Amount">後端串數量</p>*@
                                <p class="MyCerrency-Amount">0</p>
                            </div>
                        </div>
                        <div class="MyCerrency">
                            <img class="MyCerrency-Icon" src="/images/Myprofile/SRC.webp" alt="">
                            <div class="MyCerrency-Detail">
                                <p class="MyCerrency-Name">SRC</p>
                                @*<p class="MyCerrency-Amount">後端串數量</p>*@
                                <p class="MyCerrency-Amount" id="TotalSRCCount">  @TotalSRCCount </p>
                            </div>
                        </div>

                    </div>
                </div>


                <div class="Secend-Block">
                    <div class="Secend-Title">Inventory</div>
                    <div class="Secend-Inner" id="">

                        <NFT_Type />

                    </div>
                </div>
               

                <div class="Inventory-PPSR-Block" id="Inventory-PPSR-Block">
                    <div class="Inventory-PPSR-Block-Nav">
                        <div>
                            <div class="Inventory-PPSR-Amount">@PPSRsCount PPSRs</div>
                            <div class="AllBalance">Total Income: <span> @AllBalance </span> SRC </div>
                      
                        </div>
                        @if (AllBalance == 0)
                            {                        

                               <div class="  CollectBtnBlack CollectBtnSamll" >                                 
                                   No Balance
                                </div>    
                            }
                            else
                            {                         
                                <div class=" CollectBtn CollectBtnSamll"   @onclick="eventArgs => { setValue(  eventArgs); }" >       
                                    Collect All Income
                                </div>
                            }
                    </div>
                    <div class="Inventory-PPSR-Select">
                        @if (AllBalance == 0)
                        {
                            <div class="CollectBtnBlack CollectBtnBig" >         
                                No Balance
                            </div>    
                        }
                        else
                        {
                            <div class="CollectBtn CollectBtnBig" >            
                                Collect All Income
                            </div>
                        }


                        <div class="Inventory-PPSR-Filter-Block">
                            <div class="Inventory-PPSR-Filter Inventory-hover">
                                <svg class="Filter-Icon" xmlns="http://www.w3.org/2000/svg" width="28.06" height="25.65" viewBox="0 0 28.06 25.65">
                                    <g id="" data-name="" transform="translate(1508 -1239.175)">
                                        <path id="" data-name="" d="M26.916,2.993H7.6A1.851,1.851,0,0,0,7.6.707H26.916a1.143,1.143,0,1,1,0,2.287Zm-22.224,0H1.144a1.143,1.143,0,1,1,0-2.287H4.692a1.851,1.851,0,0,0,0,2.285Z" transform="translate(-1508 1241.443)" fill=""/>
                                        <path id="" data-name="" d="M26.916,2.993h-3.1a1.851,1.851,0,0,0,0-2.287h3.1a1.143,1.143,0,1,1,0,2.287Zm-6.011,0H1.144a1.143,1.143,0,1,1,0-2.287H20.905a1.85,1.85,0,0,0,0,2.285Z" transform="translate(-1508 1250.135)" fill=""/>
                                        <path id="" data-name="" d="M26.916,2.993H11.748a1.851,1.851,0,0,0,0-2.287H26.916a1.143,1.143,0,1,1,0,2.287Zm-18.077,0h-7.7a1.143,1.143,0,1,1,0-2.287h7.7a1.851,1.851,0,0,0,0,2.285Z" transform="translate(-1508 1258.828)" fill=""/>
                                        <path id="" data-name="" d="M-3.383-7.5A4.122,4.122,0,0,1,.735-3.383,4.122,4.122,0,0,1-3.383.735,4.122,4.122,0,0,1-7.5-3.383,4.122,4.122,0,0,1-3.383-7.5Zm0,5.947a1.832,1.832,0,0,0,1.83-1.83,1.832,1.832,0,0,0-1.83-1.83,1.832,1.832,0,0,0-1.83,1.83A1.832,1.832,0,0,0-3.383-1.553Z" transform="translate(-1498.471 1246.675)" fill=""/>
                                        <path id="" data-name="" d="M-3.353-7.5A4.152,4.152,0,0,1,.795-3.352,4.152,4.152,0,0,1-3.353.8,4.152,4.152,0,0,1-7.5-3.352,4.152,4.152,0,0,1-3.353-7.5Zm0,6.008a1.862,1.862,0,0,0,1.86-1.86,1.862,1.862,0,0,0-1.86-1.86,1.862,1.862,0,0,0-1.86,1.86A1.862,1.862,0,0,0-3.353-1.492Z" transform="translate(-1482.288 1255.337)" fill=""/>
                                        <path id="" data-name="" d="M-3.353-7.5A4.152,4.152,0,0,1,.795-3.352,4.152,4.152,0,0,1-3.353.8,4.152,4.152,0,0,1-7.5-3.352,4.152,4.152,0,0,1-3.353-7.5Zm0,6.008a1.862,1.862,0,0,0,1.86-1.86,1.862,1.862,0,0,0-1.86-1.86,1.862,1.862,0,0,0-1.86,1.86A1.862,1.862,0,0,0-3.353-1.492Z" transform="translate(-1494.354 1264.03)" fill=""/>
                                    </g>
                                    <p>Filter</p>
                                </svg>
                            </div>
                            
                            <aside class="marketPlaceSidebar Inventory-PPSR-Filter-Sidebar">
                                <div class="marketPlaceSidebar-scroll">


                                    <section class="Sidebar-Filter-Block" id="Filter-Header">
                                        <span>Filter</span>
                                        <div class="Filter-Header-Block">
                                            <button  hidden="@(true)" class="Filter-Button" id="Filter-Button-Reset">Reset</button>
                                            <button  hidden="@(true)" class="Filter-heart btn p-0 tippy-pop" data-content="Favorite" >
                                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 22.001 20.005">
                                                    <path class="heart__path"
                                                        d="M11.445,20.761,3.576,12.566a5.762,5.762,0,0,1,.3-8.217,5.243,5.243,0,0,1,7.807.892L12,5.677l.314-.436a5.243,5.243,0,0,1,7.807-.892,5.762,5.762,0,0,1,.3,8.217l-7.869,8.194A.763.763,0,0,1,11.445,20.761Z"
                                                        transform="translate(-0.999 -1.995)" stroke-linecap="round" stroke-linejoin="round"
                                                        stroke-width="1.5" />
                                                </svg>
                                            </button>
                                        </div>
                                    </section>

                                    <section  hidden="@(true)" class="Sidebar-Filter-Block" id="">

                                        <label for="officialDebut" class="Sidebar-checkbox-label">
                                            <input type="checkbox" id="officialDebut" class="Sidebar-checkbox">
                                            <span>Only show the official debut</span>
                                        </label>

                                    </section>

                                    <section  hidden="@(true)" class="Sidebar-Filter-Block" id="" >
                                        <div class="Filter-Title">
                                            <span>Price (ETH)</span>
                                            <img class="Filter-arrow" src="/images/MarketPlace/MP-arrow-sm.webp" alt="">
                                        </div>
                                        <div class="Filter-Options Filter-Radio">
                                            <div class="range-Input">
                                                <input type="range" name="" id="PriceRange" min="0" max="20" value="20" oninput="textInputRange.value = this.value">
                                            </div>
                                            <div class="range-Text">
                                                <div class="ra-range">0</div>
                                                <output id="textInputRange">20</output>
                                                <div class="ra-range">20</div>
                                            </div>

                                        </div>


                                    </section>
                                    
                                    <section  hidden="@(true)" class="Sidebar-Filter-Block" id="">
                                        <div class="Filter-Title">
                                            <span>Body Type</span>
                                            <img class="Filter-arrow" src="/images/MarketPlace/MP-arrow-sm.webp" alt="">
                                        </div>
                                        <div class="Filter-Options Filter-Radio">
                                            <div class="bodyType-radio d-inline position-relative bgBorder">
                                                <input style="--step:0" class="ra" type="radio" name="test" id="BodyType-1" value="1">
                                                <input style="--step:1" class="ra" type="radio" name="test" id="BodyType-1.1" value="1.1">
                                                <input style="--step:2" class="ra" type="radio" name="test" id="BodyType-1.2" value="1.2">
                                                <input style="--step:3" class="ra" type="radio" name="test" id="BodyType-1.3" value="1.3">
                                                <input style="--step:4" class="ra" type="radio" name="test" id="BodyType-1.4" value="1.4">
                                                <input style="--step:5" class="ra" type="radio" name="test" id="BodyType-1.5" value="1.5">
                                                <input style="--step:6" class="ra" type="radio" name="test" id="BodyType-1.6" value="1.6">
                                            </div>

                                            <div class="bodyType-label">
                                                <label class="ra-label" for="BodyType-1">1</label>
                                                <label class="ra-label" for="BodyType-1.1">1.1</label>
                                                <label class="ra-label" for="BodyType-1.2">1.2</label>
                                                <label class="ra-label" for="BodyType-1.3">1.3</label>
                                                <label class="ra-label" for="BodyType-1.4">1.4</label>
                                                <label class="ra-label" for="BodyType-1.5">1.5</label>
                                                <label class="ra-label" for="BodyType-1.6">1.6</label>
                                            </div>
                                        </div>


                                    </section>

                                    <section class="Sidebar-Filter-Block" id="">
                                        <div class="Filter-Title">
                                            <span>Rare</span>
                                            <img class="Filter-arrow" src="/images/MarketPlace/MP-arrow-sm.webp" alt="">
                                        </div>
                                        <div class="Filter-Options">

                                            @foreach (var item in RarityList)
                                            {
                                                var key = @item.Key;
                                                <label class="Filter-Button" for="@item.Value">
                                                    <span data-i18n="@item.Datai18n">@item.Value</span>
                                                </label>
                                                <input class="Filter-Button-checkbox" type="checkbox" @onchange="eventArgs => { CheckboxRarityClicked(key, eventArgs.Value); }" />
                                            }
                                            
                                        </div>


                                    </section>

                                    <section class="Sidebar-Filter-Block" id="">
                                        <div class="Filter-Title">
                                            <span>Class</span>
                                            <img class="Filter-arrow" src="/images/MarketPlace/MP-arrow-sm.webp" alt="">
                                        </div>
                                        <div class="Filter-Options">

                                            @foreach (var item in ElementsList)
                                            {
                                                var key = @item.Key;
                                                <label class="Filter-Button" for="@item.Value">
                                                    <span data-i18n="@item.Datai18n">@item.Value</span>
                                                </label>
                                                <input class="Filter-Button-checkbox" type="checkbox" @onchange="eventArgs => { CheckboxElementsClicked(key, eventArgs.Value); }" />
                                            }

                                        </div>
                                    </section>

                                    <section class="Sidebar-Filter-Block" id="">
                                        <div class="Filter-Title">
                                            <span>Profession</span>
                                            <img class="Filter-arrow" src="/images/MarketPlace/MP-arrow-sm.webp" alt="">
                                        </div>
                                        <div class="Filter-Options">

                                            @foreach (var item in ClassList)
                                            {
                                                var key = @item.Key;
                                                <label class="Filter-Button" for="@item.Value">
                                                    <span data-i18n="@item.Datai18n">@item.Value</span>
                                                </label>
                                                <input class="Filter-Button-checkbox" type="checkbox" @onchange="eventArgs => { CheckboxClassClicked(key, eventArgs.Value); }" />
                                            } 

                                        </div>
                                    </section>

                                    <section class="Sidebar-Filter-Block" id="">
                                        <div class="Filter-Title">
                                            <span>Country</span>
                                            <img class="Filter-arrow" src="/images/MarketPlace/MP-arrow-sm.webp" alt="">
                                        </div>
                                        <div class="Filter-Options">

                                            @foreach (var item in CountryList)
                                            {
                                                var key = @item.Key;
                                                <label class="Filter-Button" for="@item.Value">
                                                    <span data-i18n="@item.Datai18n">@item.Value</span>
                                                </label>
                                                <input class="Filter-Button-checkbox" type="checkbox" @onchange="eventArgs => { CheckboxCountryClicked(key, eventArgs.Value); }" />
                                            }

                                        </div>
                                    </section>
                                </div>
                            </aside>
                            
                        </div>


                        <select class="sortSelect Inventory-PPSR-sortSelect" name="count_adults" id=""  @onchange="(e => DoStuff(e))" > 

                            <option disabled="" value="Sort" selected="" hidden="">Sort</option>
                            <option value="Highest Earned">Highest Earned</option>
                            <option value="Lowest Earned">Lowest Earned</option>
                            <option value="Highest Price">Highest Price</option>
                            <option value="Lowest Price">Lowest Price</option>
                            <option value="Newest">Newest</option>
                            <option value="Oldest">Oldest</option>

                        </select>
                    </div>
              
                    <div class="Inventory-CardBLock">
                        
                        @* 如果Card為0張時顯示導購連結，1張以上隱藏 *@
                        <div class="IfNoCard">
                            <a href="MarketPlace">Buy PPSR >></a>
                        </div>

                       

                        @if(NFTDataList != null){
                            @foreach( NFTData item in NFTDataList)
                            {

                                string TokenID = @item.TokenID;
                                double totalRevenue = @item.totalRevenue;
                                if (@item.IsOfficial)
                                {
                                    if (@item.IsOpen)
                                    {
                                        @* 1.沒有顯示價格的版本 - 官方首拍 紅色*@
                                        <div class="NFTcard card-bg-red">
                                            <div class="heart btn p-0 tippy-pop" data-content="Favorite">
                                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 22.001 20.005" >
                                                    <path class="heart__path"
                                        d="M11.445,20.761,3.576,12.566a5.762,5.762,0,0,1,.3-8.217,5.243,5.243,0,0,1,7.807.892L12,5.677l.314-.436a5.243,5.243,0,0,1,7.807-.892,5.762,5.762,0,0,1,.3,8.217l-7.869,8.194A.763.763,0,0,1,11.445,20.761Z"
                                        transform="translate(-0.999 -1.995)" stroke-linecap="round" stroke-linejoin="round"
                                        stroke-width="2" />
                                                </svg>
                                    
                                            </div>

                                            <a class="NFTcardA" href="Products/@item.serialNumber/@item.TokenID" >
                                                @*<a href="@item.LinkURL" target="opensea">  </a>*@

                                                <div class="NFTcard-inner">
                                                    <div class="NFT-cardImg">
                                                        <img src="@item.ImgPath" alt=""  onerror="this.src='/images/MarketPlace/NFTproduct.webp'">
                                                        <div class="NFTcard-remark tippy-pop" data-content="This PPSR is temporarily under maintenance.">Under Maintenance</div>
                                                    </div>

                                                    <div class="NFT-cardText Not-Price-Ver">
                                                        <div class="NFT-card-header">
                                                            <img  class="NFT-ElementsIcon" src="@item.ElementsIcon" alt="">
                                                            <div class="NFT-Number"  >@item.Number</div>
                                                        </div>
                                                        <div class="NFT-Name"  data-i18n=NFT_data:@item.serialNumber>
                                                            @item.serialNumber
                                                        </div>
                                                          @*.................新增租金...................... *@
                                                        <div class="rent-container"  >
                                                            <div class="rent-left">
                                                                <img src="/images/MarketPlace/SRC.webp"/>
                                                            </div>
                                                            <div class="rent-right">
                                                                <p class="fee-Text" >Rental Fee: <span>  @item.nowRent </span> </p>
                                                                <p class="balance-Text" >Balance: <span>  @item.totalRevenue </span> </p>
                                                            </div>
                                                        </div>
                                                        @if (@item.totalRevenue != 0)
                                                        {
                                                             <div class="CollectBtn-Container">
                                                                  <button  class="Collect-Btn"@onclick=" (eventArgs)  =>  { 
                                                                      setValueByUnit(  TokenID , totalRevenue, eventArgs); 
                                                                      ReceiveRentByUnitOnclick();
                                                                  }" >Collect Income</button>
                                                            </div>
                                                        }
                                                        else
                                                        {
                                                             <div class="CollectBtn-Container">
                                                                  <button  class="Collect-Btn-Finish" >No Balance</button>
                                                            </div>
                                                        }
                                                     
                                                         @*....................................... *@
                                                        <div class="NFT-Income-Block">
                                                             @*<div class="NFT-Income-Block-title">Total Income</div>
                                                            <div class="NFT-Income-Main">
                                                               <div class="NFT-Income-Currency">
                                                                    <span>SRC</span>
                                                                    <img class="NFT-Income-Currency-Icon" src="/images/MarketPlace/SRC.webp" alt="">
                                                                </div>
                                                                <span class="NFT-Currency-Price">123,456,789</span>
                                                            </div>*@
                                                        </div>
                                                        <button  class="Show-tag"> Show Tag  <img   class="ShowTag-arrow" src="/images/MarketPlace/MP-arrow01.webp">  </button>
                                                    </div>
                                                   
                                                </div> 

                                                 
                                            </a>
                                             @*.................tag 區域...................... *@
                                            <div class="tag-zone">                                                   
                                                    <div class="NFT-Label-block">
                                                        <div class="NFT-Label">@item.RarityValue</div>
                                                        @* <div class="NFT-Label">@item.ClassValue</div>*@
                                                        <div class="NFT-Label">Survival master</div>
                                                    </div>
                                            </div>
                                              @*....................................... *@
                                        </div>





                                    }
                                    else
                                    {
                                        /*官方 預定販售NFT*/
                                        <div class="NFTcard card-bg-grey">
                                            <div class="heart btn p-0 tippy-pop" data-content="Favorite">
                                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 22.001 20.005">
                                                    <path class="heart__path"
                                                    d="M11.445,20.761,3.576,12.566a5.762,5.762,0,0,1,.3-8.217,5.243,5.243,0,0,1,7.807.892L12,5.677l.314-.436a5.243,5.243,0,0,1,7.807-.892,5.762,5.762,0,0,1,.3,8.217l-7.869,8.194A.763.763,0,0,1,11.445,20.761Z"
                                                    transform="translate(-0.999 -1.995)" stroke-linecap="round" stroke-linejoin="round"
                                                    stroke-width="2" />
                                                </svg>
                                            </div>

                                            <a href="Products/@item.serialNumber/@item.TokenID" >
                                             @*<a href="@item.LinkURL" target="opensea"></a>*@
                                                
                                                <div class="NFTcard-inner">

                                                    <div class="NFT-cardImg">
                                                        <img src="@item.ImgPath" alt=""   onerror="this.src='/images/MarketPlace/NFTproduct.webp'">
                                                        <div class="NFTcard-remark tippy-pop" data-content="This PPSR is temporarily under maintenance.">Under Maintenance</div>
                                                    </div>
                                                
                                                    <div class="NFT-cardText">
                                                        <div class="NFT-Number">#PPSR @item.Number</div>
                                                        <div class="NFT-Name"  data-i18n=NFT_data:@item.serialNumber>
                                                            @item.serialNumber
                                                        </div>

                                                             @*.................新增租金...................... *@
                                                        <div class="rent-container"  >
                                                            <div class="rent-left">
                                                                <img src="/images/MarketPlace/SRC.webp"/>
                                                            </div>
                                                            <div class="rent-right">
                                                                <p class="fee-Text" >Rental Fee: <span> @item.nowRent </span> </p>
                                                                <p class="balance-Text" >Balance: <span> @item.totalRevenue </span> </p>
                                                            </div>
                                                        </div>
                                                        @if (@item.totalRevenue != 0)
                                                        {
                                                             <div class="CollectBtn-Container">
                                                                  <button  class="Collect-Btn"@onclick=" (eventArgs)  =>  { 
                                                                      setValueByUnit(  TokenID , totalRevenue, eventArgs); 
                                                                      ReceiveRentByUnitOnclick();
                                                                  }" >Collect Income</button>
                                                            </div>
                                                        }
                                                        else
                                                        {
                                                             <div class="CollectBtn-Container">
                                                                  <button  class="Collect-Btn-Finish" >No Balance</button>
                                                            </div>
                                                        }
                                                     
                                                    
                                                          @*....................................... *@




                                                        <div class="NFT-PriceBlock">
                                                            <div class="NFT-PriceMain">
                                            
                                                                <span class="NFT-Price">ComingSoon</span>
                                                            </div>
                                                        @*  <div class="NFT-USD">231269.89 USD</div>*@
                                                        </div>
                                                        @*<div class="NFT-EndTime">Ends in 30d 12h</div>*@
                                                        <button  class="Show-tag"> Show Tag  <img   class="ShowTag-arrow" src="/images/MarketPlace/MP-arrow01.webp">  </button>
                                                    </div>

                                                </div>
                                            </a>
                                           @*.................tag 區域...................... *@
                                                     
                                            <div class="tag-zone">
                                                <button  class="Show-tag"> tag </button>
                                                    <div class="NFT-Label-block">
                                                        <div class="NFT-Label">@item.RarityValue</div>
                                                        @* <div class="NFT-Label">@item.ClassValue</div>*@
                                                        <div class="NFT-Label">Survival master</div>
                                                    </div>
                                            </div>
                                                  @*....................................... *@
                                        </div>

                                    }
                                }
                                else
                                {
                                    if(@item.IsOpen){
                    
                                        <div class="NFTcard card-bg-green">
                                            <div class="heart btn p-0 tippy-pop" data-content="Favorite">
                                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 22.001 20.005">
                                                    <path class="heart__path"
                                                    d="M11.445,20.761,3.576,12.566a5.762,5.762,0,0,1,.3-8.217,5.243,5.243,0,0,1,7.807.892L12,5.677l.314-.436a5.243,5.243,0,0,1,7.807-.892,5.762,5.762,0,0,1,.3,8.217l-7.869,8.194A.763.763,0,0,1,11.445,20.761Z"
                                                    transform="translate(-0.999 -1.995)" stroke-linecap="round" stroke-linejoin="round"
                                                    stroke-width="2" />
                                                </svg>
                                            </div>

                                            <a href="Products/@item.serialNumber/@item.TokenID" >
                                            @*<a href="@item.LinkURL" target="opensea"></a>*@

                                                <div class="NFTcard-inner">
                                                    <div class="NFT-cardImg">
                                                        <img src="@item.ImgPath" alt=""   onerror="this.src='/images/MarketPlace/NFTproduct.webp'">
                                                        <div class="NFTcard-remark tippy-pop" data-content="This PPSR is temporarily under maintenance.">Under Maintenance</div>
                                                    </div>
                                                
                                                    <div class="NFT-cardText">

                                                        <div class="NFT-Number">#@item.Number</div>
                                                        <div class="NFT-Name" data-i18n=NFT_data:@item.serialNumber >
                                                            @item.serialNumber
                                                        </div>
                                                        @*<div class="NFT-PriceBlock">
                                                            <div class="NFT-PriceMain">
                                                                <div class="NFT-PriceIcon-Border">
                                                                    <img class="NFT-PriceIcon" src="/images/MarketPlace/Polygon-eth-01.webp"  alt="ETH ON POLYGON"  title="ETH ON POLYGON">
                                                                </div>
                                                                <span class="NFT-Price">$@item.Price</span>
                                                            </div>
                                                            <div class="NFT-USD">@item.USD USD</div>
                                                        </div>*@
                                                        <div class="NFT-EndTime">Ends in @item.CalDays</div>
                                                    </div>

                                                
                                                </div>
                                            </a>


                                        </div>
                            
                                    }
                                }
                                
                              

                            }
                        }


                       
                    </div>



                    <div class="Pagination-Block">
                        @*這裡要加頁碼*@
                        <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" /> 
                    </div>




                </div>




            </div>



        </div>


    @*.................全部領 彈窗...................... *@
    <section class="products-popup-bg AllCollectPop">
    
        <div class="products-popupblock" >
         
            <svg class="products-popup-close" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 25 25" width="25">
                <path id="" data-name="" d="M10,10,0,20,10,10,0,0,10,10,20,0,10,10,20,20Z" transform="translate(2.5 2.5)"
                    fill="none" stroke="#67ada2" stroke-linecap="round" stroke-linejoin="round" stroke-width="5" />
            </svg>

    
            <div class="products-popup-content">
                <div class="products-popup-text">Comfirm to Collect All <span >(@CollectBalance)</span> Income?</div>
          
                <button class="products-popup-submit" type="submit" @onclick="ReceiveRent" >Confirm </button>
            </div>
        </div>
    </section>
     @*.................個別領 彈窗...................... *@
    <section class="products-popup-bg SingelAllCollectPop">
    
        <div class="products-popupblock" >
         
            <svg class="products-popup-close" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 25 25" width="25">
                <path id="" data-name="" d="M10,10,0,20,10,10,0,0,10,10,20,0,10,10,20,20Z" transform="translate(2.5 2.5)"
                    fill="none" stroke="#67ada2" stroke-linecap="round" stroke-linejoin="round" stroke-width="5" />
            </svg>

    
            <div class="products-popup-content">
                <div class="products-popup-text"> Comfirm to Collect <p class="NFT-Number-Pop"></p> <span>(@CollectBalance)</span>  Income?  </div>
                <div  class="show-msg"><img id="ShowMSGcheckbox" typeof="button" src="/images/MarketPlace/checkbox.webp"/> Do not show this message again </div>
                <button class="products-popup-submit" @onclick="ReceiveRentByUnit" type="submit"  >Confirm  </button>
            </div>
        </div>
    </section>


    </Authorized>
    <NotAuthorized>
        <div class="InventoryNotLogin">
            <h1>Please Login First</h1>
        </div>
    </NotAuthorized>
</AuthorizeView>


@code {
    //租金變數......
    //所有Balance加總
    private double AllBalance = 0;

    //彈窗顯示領取的金額
    private double CollectBalance  = 600; 

    private IJSObjectReference? RentJumpJS;

    private int PPSRsCount;

    private double TotalSRCCount = 0;
    /// <summary>
    /// 稀有度
    /// </summary>
    private List<OptionKeyValue> RarityList = new List<OptionKeyValue>();
    /// <summary>
    /// 屬性
    /// </summary>
    private List<OptionKeyValue> ElementsList = new List<OptionKeyValue>();
    /// <summary>
    /// 職業專精
    /// </summary>
    private List<OptionKeyValue> ClassList= new List<OptionKeyValue>();
    /// <summary>
    /// 國家
    /// </summary>
    private List<OptionKeyValue> CountryList= new List<OptionKeyValue>();

    private List<NFTData> NFTDataList;

    public MetaData MetaData { get; set; } = new MetaData();

    protected override async Task OnInitializedAsync()
    {

        AppState.StateChanged += async (Source, Property)
        => await InvokeAsync(StateHasChanged);
     
    }

    private async Task Refresh()
    {   

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var LoginUser = authState.User;
        string UserID = LoginUser.FindFirst("UserID")?.Value; //AppState.LoginStatus.userID.ToString();

        RarityList = await InventoryService.Get_Default_Rarity();
        ElementsList = await InventoryService.Get_Default_Elements();
        ClassList = await InventoryService.Get_Default_Class();
        CountryList = await InventoryService.Get_Default_Country();
        PagedList<NFTData> pagelist = await InventoryService.GetRiderNFTDataPageList(UserID, 1,10);
        NFTDataList = pagelist;

        MetaData =  pagelist.MetaData;



        TotalSRCCount = AppState.LoginStatus.nftCurrency1;
        PPSRsCount = MetaData.TotalCount;


        
        AllBalance = await InventoryService.CalReceiveRent(UserID);

        StateHasChanged();
    }

     private async Task DoStuff(ChangeEventArgs e)
    {
        
        PagedList<NFTData> pagelist=await InventoryService.GetRiderNFTDataListOrderby( e.Value.ToString() ,1 ,10);

        MetaData =  pagelist.MetaData;
        NFTDataList = pagelist;
        PPSRsCount = MetaData.TotalCount;
    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Refresh();
            @* await JS.InvokeVoidAsync("myprofileSidebar"); *@
            await JS.InvokeVoidAsync("installI18n");
            await JS.InvokeVoidAsync("heartClick");
            await JS.InvokeVoidAsync("FilterButtonClick");
            await JS.InvokeVoidAsync("FilterArrowSlideClick");
            await JS.InvokeVoidAsync("InventoryFilterSidebarClick");
            await JS.InvokeVoidAsync("CardAmountLinkDisplay");
            await JS.InvokeVoidAsync("TippyInit");

            await JS.InvokeVoidAsync("NFTcardAClick");    
            await JS.InvokeVoidAsync("CollectBtnPoP");   
            await JS.InvokeVoidAsync("ShowMSGcheckbox");    

            await JS.InvokeVoidAsync("showTag");   

            RentJumpJS = await JS.InvokeAsync<IJSObjectReference>("import","./JavaScript/InventoryAndMarketPlace/RentJump.js");

        }
    }




    void IDisposable.Dispose()
    {
        AppState.StateChanged -= async (Source, Property)
        => await InvokeAsync(StateHasChanged);
    }






    private async Task SelectedPage(int page)
    {
        await GetRiderNFTDataPageList(page);
    }

    private async Task GetRiderNFTDataPageList(int page)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var LoginUser = authState.User;
        string UserID = LoginUser.FindFirst("UserID")?.Value; //AppState.LoginStatus.userID.ToString();

        PagedList<NFTData> pagelist = await InventoryService.GetRiderNFTDataPageList(UserID , page,10);
        NFTDataList = pagelist;
        MetaData = pagelist.MetaData;
        PPSRsCount = MetaData.TotalCount;
    }


        /* filter  */

    /// <summary>
    /// 
    /// </summary>
    public List<string> CheckBoxRarity { get; set; } = new List<string>();
    public List<string> CheckBoxElements { get; set; } = new List<string>();
    public List<string> CheckBoxClass { get; set; } = new List<string>();
    public List<string> CheckBoxCountry { get; set; } = new List<string>();
    /// <summary>
    /// 
    /// </summary>
    /// <param name="CheckID"></param>
    /// <param name="checkedValue"></param>
    private void CheckboxRarityClicked(string CheckID, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            if (!CheckBoxRarity.Contains(CheckID))
            {
                CheckBoxRarity.Add(CheckID);
            }
        }
        else
        {
            if (CheckBoxRarity.Contains(CheckID))
            {
                CheckBoxRarity.Remove(CheckID);
            }
        }
        GetFilter();
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="CheckID"></param>
    /// <param name="checkedValue"></param>
    private void CheckboxElementsClicked(string CheckID, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            if (!CheckBoxElements.Contains(CheckID))
            {
                CheckBoxElements.Add(CheckID);
            }
        }
        else
        {
            if (CheckBoxElements.Contains(CheckID))
            {
                CheckBoxElements.Remove(CheckID);
            }
        }
        GetFilter();
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="CheckID"></param>
    /// <param name="checkedValue"></param>
    private void CheckboxClassClicked(string CheckID, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            if (!CheckBoxClass.Contains(CheckID))
            {
                CheckBoxClass.Add(CheckID);
            }
        }
        else
        {
            if (CheckBoxClass.Contains(CheckID))
            {
                CheckBoxClass.Remove(CheckID);
            }
        }
        GetFilter();
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="CheckID"></param>
    /// <param name="checkedValue"></param>
    private void CheckboxCountryClicked(string CheckID, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            if (!CheckBoxCountry.Contains(CheckID))
            {
                CheckBoxCountry.Add(CheckID);
            }
        }
        else
        {
            if (CheckBoxCountry.Contains(CheckID))
            {
                CheckBoxCountry.Remove(CheckID);
            }
        }
        GetFilter();
    }

    private async Task GetFilter()
    { 

        PagedList<NFTData> pagelist = await InventoryService.Get_NFT_by_Filter( 1,10 ,CheckBoxRarity ,CheckBoxElements , CheckBoxClass ,CheckBoxCountry);
        NFTDataList = pagelist;
        MetaData = pagelist.MetaData;
        PPSRsCount = MetaData.TotalCount;
    }

    //private string UserID { get;set;}
    public string TokenID { get;set;}
    /// <summary>
    /// 
    /// </summary>
    private async void setValueByUnit( string ppsr ,double totalRevenue , object onClickValue)
    {       
        TokenID = ppsr;
        CollectBalance = totalRevenue;
    }

    /// <summary>
    /// 
    /// </summary>
    private async void setValue( object onClickValue)
    {
        string UserID = AppState.LoginStatus.userID.ToString();
        CollectBalance = await InventoryService.CalReceiveRent(UserID);
    }



    /// <summary>
    /// 
    /// </summary>
    /// <param name="UserID"></param>
    /// <param name="ppsr"></param>
    /// <returns></returns>
    // ShowMSGState 取得個別視窗是否彈窗
    private bool ShowMSGState = false;
    public async Task ReceiveRentByUnit()
    {

        ShowMSGState = await JS.InvokeAsync<bool>("getShowMSGState"); 
        string UserID = AppState.LoginStatus.userID.ToString();
        var Rent = await InventoryService.ReceiveRentByUnit(UserID ,TokenID );
        if (RentJumpJS != null)
        {
            await RentJumpJS.InvokeVoidAsync("RentJump", TotalSRCCount, TotalSRCCount + Rent);
        }
        TotalSRCCount = TotalSRCCount + Rent;
        TotalSRCCount = Math.Round(TotalSRCCount, 3, MidpointRounding.AwayFromZero); 
        AllBalance = await InventoryService.CalReceiveRent(UserID);

        StateHasChanged();
    }
    public void  ReceiveRentByUnitOnclick()
    {
        if (ShowMSGState)
        {
            ReceiveRentByUnit();
        }
    

    }

    



    /// <summary>
    /// 
    /// </summary>
    /// <param name="UserID"></param>
    /// <returns></returns>
    public async Task ReceiveRent( )
    {
        string UserID = AppState.LoginStatus.userID.ToString();
        var Rent =  await InventoryService.ReceiveRent(UserID  );
        if (RentJumpJS != null)
        {
            await RentJumpJS.InvokeVoidAsync("RentJump", TotalSRCCount, TotalSRCCount + Rent);
        }
         TotalSRCCount = TotalSRCCount + Rent;
         TotalSRCCount = Math.Round(TotalSRCCount, 3, MidpointRounding.AwayFromZero); 
         AllBalance = await InventoryService.CalReceiveRent(UserID);
    }
}